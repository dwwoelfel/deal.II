//----------------------------  cylinder_04.cc  ---------------------------
//    $Id$
//    Version: $Name$ 
//
//    Copyright (C) 2003, 2004, 2005, 2007 by the deal.II authors
//
//    This file is subject to QPL and may not be  distributed
//    without copyright and license information. Please refer
//    to the file deal.II/doc/license.html for the  text  and
//    further information on this license.
//
//----------------------------  cylinder_04.cc  ---------------------------


// check the cells generated by the CylinderBoundary for an arbitrary
// orientation

#include "../tests.h"
#include <base/logstream.h>
#include <base/quadrature_lib.h>
#include <grid/tria.h>
#include <grid/tria_boundary_lib.h>
#include <grid/tria_accessor.h>
#include <grid/tria_iterator.h>
#include <grid/grid_generator.h>
#include <grid/grid_tools.h>
#include <dofs/dof_handler.h>
#include <fe/fe_q.h>
#include <fe/fe_values.h>
#include <fe/mapping_c1.h>

#include <fstream>


const double xy_angle = deal_II_numbers::PI/6;

template <int dim>
Point<dim> rotate_to_y (const Point<dim> &p)
{
  return Point<dim> (p[0]*std::cos(xy_angle) - p[1]*std::sin(xy_angle),
		     p[0]*std::sin(xy_angle) + p[1]*std::cos(xy_angle),
		     p[2]);
}


template <int dim>
void check ()
{
  Triangulation<dim> triangulation;
  GridGenerator::cylinder (triangulation);

  GridTools::transform (&rotate_to_y<dim>, triangulation);
  
  static const CylinderBoundary<dim> boundary (1,
					       Point<dim>(std::cos(xy_angle), std::sin(xy_angle), 0),
					       Point<dim>());
  triangulation.set_boundary (0, boundary);
  triangulation.refine_global (2);

  for (typename Triangulation<dim>::active_cell_iterator
         cell = triangulation.begin_active();
       cell!=triangulation.end(); ++cell)
    for (unsigned int i=0; i<GeometryInfo<dim>::vertices_per_cell; ++i)
      deallog << cell->vertex(i) << std::endl;
}


int main () 
{
  std::ofstream logfile("cylinder_04/output");
  deallog.attach(logfile);
  deallog.depth_console(0);
  deallog.threshold_double(1.e-10);

  check<3> ();
}

  
  
