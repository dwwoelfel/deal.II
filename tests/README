DEAL.II TESTSUITE README
========================

TODO: Merge into testsuite.html



General test layout
===================

A test usually consists of a source file and an output file for
comparison (under SOURCE_DIR/tests):

  category/test.cc
  category/test.output

test.cc must be a regular executable (i.e. having an int main() routine).
It will be compiled, linked and run. The executable should not output
anything to cout (at least under normal circumstances, i.e. no error
condition), instead the executable should output to a file "output" under
the current working directory.


As a last stage the generated output during the run stage will be compared
to category/test.output.

The full file signature for a comparison file is

  category/test.[with_<feature>=<on|off>.]*[mpirun=<x>.][<debug|release>.]output

which is explained in detail below.


Restrict tests for build configurations
---------------------------------------

Normally, a test will be set up for debug and release configuration (if
deal.II was configured with combined DebugRelease build type) or for the
available build configuration (if deal.II was configured either with Debug
or with Release only build type).

If a specific test can only be run in debug or release configurations but
not in both it is possible to restrict the setup by prepeding ".debug" or
".release" directly before ".output", e.g.:

  category/test.debug.output

This way, test will only be set up to build and run against the debug
library.

Note: It is possible to provide both configuration types at the same time:

  category/test.debug.output
  category/test.release.output

This will set up two seperate tests, one for the debug configuration that
will be tested against test.debug.output, and similarly one for release.


Restrict tests for feature configurations
-----------------------------------------

In a similar vain as for build configurations, it is possible to restrict
tests to specific feature configurations, e.g.:

  category/test.with_umfpack=on.output, or
  category/test.with_zlib=off.output

These tests will only be set up if the specified feature was configured
accordingly.

Note: It is possible to provide different output files for disabled/enabled
features, e.g.

  category/test.with_64bit_indices=on.output
  category/test.with_64bit_indices=off.output


Note: It is possible to declare multiple constraints subsequently, e.g.

  category/test.with_umfpack=on.with_zlib=on.output

Note: Quite a number of test categories are already guarded so that the
contained tests will only be set up if the feature is enabled. In this case
a feature constraint in the output file name is redundant and should be
avoided. (Folder with guards are distributed_grids, lapack, metis, petsc,
slepc, trilinos, umfpack, gla, mpi)


Run mpi tests with mpirun
-------------------------

If a test should be run with mpirun in parallel, specify the number x of
simultaneous processes in the following way:

  category/test.mpirun=x.output

Note: It is possible to provide multiple output files for different mpirun
values.


TODO: Write and document the following

  - How a normal run looks like.

  - Intermediate files generated under BUILD_DIR.

    BUILD_DIR/tests/category/test[.mpirun=x].<debug|release>

      output our failing_output
      diff or failing_diff
