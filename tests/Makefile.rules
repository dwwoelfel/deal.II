######################################################################
# $Id$
#
# Copyright (C) 2001, the deal.II authors
#
# Common make rules for test files. To be included by the Makefiles
# in the subdirectories.
######################################################################


normalize = $D/common/scripts/normalize.pl

verbose = off


############################################################
# First how to create executables, including all necessary
# flags:
############################################################

# If in multithread mode, add the ACE library to the libraries which
# we need to link with:
ifneq ($(with-multithreading),no)
  LIBS += $(lib-ACE)
endif

flags     = $(CXXFLAGS.g) $(CXXFLAGS) -Wno-missing-noreturn

%.go : %.cc Makefile
	@echo =====debug========= $<
	@$(CXX) $(flags) -c $< -o $@
%.exe :
	@echo =====linking======= $@
	@$(CXX) $(LDFLAGS) $(flags) -o $@ $^ $(LIBS)


############################################################
# Next how to create output: by simply running a program.
# Note that we normalize output to a few digits after
# the decimal punct, in order to be able to check across
# different platforms where we might differ in round-off etc.
############################################################

%.output : %.exe
	@echo =====Running======= $<
	@./$<
	@perl -pi $(normalize)  $@



############################################################
# Postprocessing the output: compare with precomputed
# files. In default mode, do not show diffs as they are 
# usually overly verbose. Only if user calls `make' with
# flag `verbose=on' show the diffs. Also note that we
# usually let the call to `make# continue even if we
# find a difference, since the output is clearly marked
# as a failing test and we normally want to see the results
# of all tests at once, including those that come after
# the failed one.
#
# if, however, the flag `stop_on_error=on' was given, the
# check command fails whenever teh output differs from the
# precomputed file.
############################################################


%.check : %.output
	@echo '=====Checking======' $<
	@if test "x$(verbose)" = "xon" ; then \
		cmd="diff $< $(patsubst %.output,%.checked, $<)" ; \
	 else \
		cmd="diff $< $(patsubst %.output,%.checked, $<) > /dev/null" ; \
	 fi ; \
	 if eval $$cmd ; then \
		echo '=====OK============' $@ ; \
		touch $@ ; \
	 else \
		echo '+++++Error+++++++++' $@ ; \
		if test "x$(stop_on_error)" = "xon" ; then \
			false ; \
		fi ; \
	 fi



############################################################
# After all these general rules, here is the target to be
# executed by make: for each entry in the list $(tests)
# perform a check. Do it in alphabetical order for better
# overview
############################################################
run-tests: $sort($(tests:%=%.check))




############################################################
# Cleanup targets
############################################################

clean:
	rm -f Makefile.depend *.o *.go *.output

veryclean: clean
	rm -f *.exe *.testcase *.inp *.gpl *.eps *.gnuplot




############################################################
# Automatic generation of dependencies
############################################################

Makefile.depend: $(shell echo *.cc)
	@echo =====Dependencies== $@
	@$(CXX) $(CXXFLAGS.g) $^ -M > $@
	@perl -pi -e 's/(^[^.]+)\.o:/\1.o \1.go:/;' $@
