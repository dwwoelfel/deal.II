######################################################################
# Makefile.rules,v 1.11 2001/04/24 13:18:09 wolf Exp
#
# Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, the deal.II authors
#
# Common make rules for test files. To be included by the Makefiles
# in the subdirectories.
######################################################################


normalize = $D/common/scripts/normalize.pl

WORKDIR = $(notdir $(shell pwd))

verbose = off


PLATFORM = $(TARGET)+$(GXX-VERSION:intel_%=%)
PLATFORM-HIERARCHY = $(shell $(PERL) ../hierarchy.pl $(PLATFORM))

############################################################
# First how to create executables, including all necessary
# flags:
############################################################

flags     = $(CXXFLAGS.g)

ifeq ($(findstring gcc,$(GXX_VERSION)),gcc)
flags += -Wno-missing-noreturn
endif

%/obj.g.$(OBJEXT) : %.cc
	@echo =====debug========= $<
	@$(CXX) $(flags) -c $< -o $@

%/obj.$(OBJEXT) : %.cc
	@echo =====optimized===== $<
	@$(CXX) $(CXXFLAGS.o) -c $< -o $@

######################################################################
# Don't put $(libraries) into this line since it is already in $^
######################################################################
%/exe : %/obj.g.$(OBJEXT)
	@echo =====linking======= $@
	@$(CXX) $(LDFLAGS) -o $@ $^ $(LIBS)


############################################################
# Next how to create output: by simply running a program.
# Note that we normalize output to a few digits after
# the decimal punct, in order to be able to check across
# different platforms where we might differ in round-off etc.
#
# Since the test suite is usually run automatically, we
# impose a maximum run time of 30 CPU minutes for each
# program.
#
# In the line after we execute the program, we make sure that
# the program terminated without error code; otherwise delete
# the output file and stop the make command. This is done so
# that when you run make for that output file again later
# then make would not say that the output file is up to
# date and does not need to be regenerated
############################################################

%/output : %/exe
	@echo =====Running======= $<
	@ulimit -t 2400 ; ./$< ; \
	  if test ! $$? = 0 ; then rm $@ ; false ; fi
	@perl -pi $(normalize)  $@



############################################################
# Postprocessing the output: compare with precomputed
# files. In default mode, do not show diffs as they are 
# usually overly verbose. Only if user calls `make' with
# flag `verbose=on' show the diffs. Also note that we
# usually let the call to `make' continue even if we
# find a difference, since the output is clearly marked
# as a failing test and we normally want to see the results
# of all tests at once, including those that come after
# the failed one.
#
# if, however, the flag `stop_on_error=on' was given, the
# check command fails whenever the output differs from the
# precomputed file.
#
# as to finding which output file to compare with: we simply
# walk the list of files created by the ./hierarchy.pl file
# and take the first one.
############################################################


%/OK : %/output
	@echo '=====Checking======' $<
	@$(PERL) -pi $(normalize)  $<
	@for i in $(PLATFORM-HIERARCHY) ; do \
	    testname=$(<:%/output=%) ; \
	    if test -f $$testname/cmp/$$i ; then \
		cmpfile_found=yes ; \
		if test "x$(verbose)" = "xon" ; then \
			cmd="diff $(DIFFOPT) -w $< $$testname/cmp/$$i" ; \
		 else \
			cmd="diff -w $< $$testname/cmp/$$i > /dev/null" ; \
		 fi ; \
		 if eval $$cmd ; then \
			echo '=====OK============' $@ ; \
			touch $@ ; \
		 else \
			if test "x$(verbose)" = "xon" ; then \
				echo '+++++Error+++++++++' $@ " ($$testname/cmp/$$i)" ; \
			else \
				echo '+++++Error+++++++++' $@ "($$testname/cmp/$$i) Use make verbose=on for the diffs" ; \
			fi ; \
			if test "x$(stop_on_error)" = "xon" ; then \
				exit 1 ; \
			fi ; \
		 fi ; \
		 break ; \
	    fi ; \
	  done && \
	  if test "x$$cmpfile_found" != "xyes" ; then \
		echo "*** No suitable file in $$testname/cmp found! ***" ; \
		false ; \
	  fi


############################################################
# Generate a report for the present date, in which the
# results (indicated by a "+" for a successful test, and a
# "-" for a failing one) for all tests is summarized. Use
# universal time in order to be able to run this target
# anywhere anytime
############################################################
report:
	@-$(MAKE) -k run-tests
	@for test in $(sort $(tests)) ; do \
		if $(MAKE) -q $$test/OK ; then \
			echo `date -u +"%Y-%m-%d %H:%M"` "  +  $(WORKDIR)/$$test" ; \
		else \
			echo `date -u +"%Y-%m-%d %H:%M"` " 0   $(WORKDIR)/$$test" ; \
		fi ; \
	done


report+mail:
	@$(MAKE) report | tee testresults
	@cat testresults | mail regression-tests@dealii.org
	@rm testresults


############################################################
# Generating references: Useful when creating references for
# a new platform or when updating several non-generic
# references.
############################################################
%/ref : %/output
	@$(PERL) -pi $(normalize)  $<
	@for i in $(PLATFORM-HIERARCHY) ; do \
	    testname=$(<:%/output=%) ; \
	    if test -f $$testname/cmp/$$i ; then \
	        cmd="diff -w $< $$testname/cmp/$$i > /dev/null" ; \
		if eval ! $$cmd ; then \
		    echo '=====Creating======' $$testname/cmp/$(PLATFORM) ; \
		    cp $$testname/output $$testname/cmp/$(PLATFORM); \
		fi ; \
		break ; \
	    fi ; \
	  done


############################################################
# After all these general rules, here is the target to be
# executed by make: for each entry in the list $(tests)
# perform a check.
############################################################
run-tests: $(tests:%=%/OK)

output: $(tests:%=%/output)

build: $(tests:%=%/exe)

refs: $(tests:%=%/ref)

############################################################
# Cleanup targets
############################################################

clean:
	-rm -f Makefile.depend Makefile.tests */obj.$(OBJEXT) \
               */obj.g.$(OBJEXT) */output *~

distclean: clean
	-rm -f */exe *.testcase *.inp *.gpl *.eps *.gnuplot


show-tests:
	@echo $(tests)

############################################################
# Automatic generation of dependencies
############################################################

Makefile.depend: $(shell echo *.cc)
	@echo =====Dependencies== $@
	@$D/common/scripts/make_dependencies $(INCLUDE) $^ > $@ \
		|| (rm -f $@ ; false)
	@$(PERL) -pi -e 's#\.((g\.)?$(OBJEXT):)#/obj.\1#g;' $@

Makefile.tests: Makefile $(shell echo *.cc)
	@echo =====Targets======= $@
	@for i in $(tests) ; do \
		echo "$$i/exe : $$i/obj.g.\$$(OBJEXT) \$$(libraries)"; \
	 done \
		> $@


.PHONY: report show-tests clean distclean %/ref

