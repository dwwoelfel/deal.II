######################################################################
# Makefile.rules,v 1.11 2001/04/24 13:18:09 wolf Exp
#
# Copyright (C) 2001, 2002, 2003, the deal.II authors
#
# Common make rules for test files. To be included by the Makefiles
# in the subdirectories.
######################################################################


normalize = $D/common/scripts/normalize.pl

WORKDIR = $(notdir $(shell pwd))

verbose = off

############################################################
# First how to create executables, including all necessary
# flags:
############################################################

flags     = $(CXXFLAGS.g)

ifeq ($(findstring gcc,$(GXX_VERSION)),gcc)
flags += -Wno-missing-noreturn
endif

%.g.$(OBJEXT) : %.cc Makefile
	@echo =====debug========= $<
	@$(CXX) $(flags) -c $< -o $@

%.$(OBJEXT) : %.cc Makefile
	@echo =====optimized===== $<
	@$(CXX) $(CXXFLAGS.o) -c $< -o $@

######################################################################
# Don't put $(libraries) into this line since it is already in $^
######################################################################
%.exe :
	@echo =====linking======= $@
	@$(CXX) $(LDFLAGS) -o $@ $^ $(LIBS)


############################################################
# Next how to create output: by simply running a program.
# Note that we normalize output to a few digits after
# the decimal punct, in order to be able to check across
# different platforms where we might differ in round-off etc.
#
# Since the test suite is usually run automatically, we
# impose a maximum run time of 30 CPU minutes for each
# program.
############################################################

%.output : %.exe
	@echo =====Running======= $<
	@ulimit -t 1800 ; ./$<
	@perl -pi $(normalize)  $@



############################################################
# Postprocessing the output: compare with precomputed
# files. In default mode, do not show diffs as they are 
# usually overly verbose. Only if user calls `make' with
# flag `verbose=on' show the diffs. Also note that we
# usually let the call to `make# continue even if we
# find a difference, since the output is clearly marked
# as a failing test and we normally want to see the results
# of all tests at once, including those that come after
# the failed one.
#
# if, however, the flag `stop_on_error=on' was given, the
# check command fails whenever teh output differs from the
# precomputed file.
############################################################


%.OK : %.output
	@echo '=====Checking======' $<
	@perl -pi $(normalize)  $<
	@if test "x$(verbose)" = "xon" ; then \
		cmd="diff -w $< ../compare/$(WORKDIR)/$<" ; \
	 else \
		cmd="diff -w $< ../compare/$(WORKDIR)/$< > /dev/null" ; \
	 fi ; \
	 if eval $$cmd ; then \
		echo '=====OK============' $@ ; \
		touch $@ ; \
	 else \
		if test "x$(verbose)" = "xon" ; then \
			echo '+++++Error+++++++++' $@ ; \
		else \
			echo '+++++Error+++++++++ $@. Use make verbose=on for the diffs' ; \
		fi ; \
		if test "x$(stop_on_error)" = "xon" ; then \
			false ; \
		fi ; \
	 fi


############################################################
# Generate a report for the present date, in which the
# results (indicated by a "+" for a successful test, and a
# "-" for a failing one) for all tests is summarized. Use
# universal time in order to be able to run this target
# anywhere anytime
############################################################
report:
	@today=`date -u +"%Y-%m-%d %H:%M"` ; \
	for test in $(sort $(tests)) ; do \
		if (($(MAKE) $$test.OK stop_on_error=on 2>&1) > /dev/null); then \
			echo $$today + $$test ; \
		else \
			echo $$today - $$test ; \
		fi ; \
	done


############################################################
# After all these general rules, here is the target to be
# executed by make: for each entry in the list $(tests)
# perform a check.
############################################################
run-tests: $(tests:%=%.OK)

output: $(tests:%=%.output)

############################################################
# Link and copy files in ./results/* to generate checked
# checked files for new hardware/compiler platform.
#
# It is expected that the tests are run with ./compare being
# sym-linked to a suitable existing result directory.
#
# The current subdirectory must exist there.
############################################################
new-platform: output run-tests
	csh ../newplatform.csh $(WORKDIR) $(TARGET)+$(GXX-VERSION)

############################################################
# Cleanup targets
############################################################

clean:
	-rm -f Makefile.depend *.$(OBJEXT) *.g.$(OBJEXT) *.output *~

distclean: clean
	-rm -f *.exe *.testcase *.inp *.gpl *.eps *.gnuplot


show-tests:
	@echo $(tests)

############################################################
# Automatic generation of dependencies
############################################################

Makefile.depend: $(shell echo *.cc)
	@echo =====Dependencies== $@
	@$(CXX) $(CXXFLAGS.g) $^ -M > $@
	@perl -pi -e 's/(^[^.]+)\.$(OBJEXT):/\1.$(OBJEXT) \1.g.$(OBJEXT):/;' $@


.PHONY: report show-tests
