//---------------------------------------------------------------------------
//    $Id$
//    Version: $Name$
//
//    Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2011 by the deal.II authors
//
//    This file is subject to QPL and may not be  distributed
//    without copyright and license information. Please refer
//    to the file deal.II/doc/license.html for the  text  and
//    further information on this license.
//
//---------------------------------------------------------------------------

for (VEC : SERIAL_VECTORS ; deal_II_dimension : DIMENSIONS)
{  
  template
    void VectorTools::interpolate
    (const Mapping<deal_II_dimension>&,
     const DoFHandler<deal_II_dimension>&,
     const Function<deal_II_dimension>&,
     VEC&);
   template 
     void VectorTools::interpolate
      (const DoFHandler<deal_II_dimension>&,
      const Function<deal_II_dimension>&,
      VEC&);

  template 
    void VectorTools::interpolate
    (const Mapping<deal_II_dimension>&,
     const hp::DoFHandler<deal_II_dimension>&,
     const Function<deal_II_dimension>&,
     VEC&);
  template
    void VectorTools::interpolate
    (const hp::DoFHandler<deal_II_dimension>&,
     const Function<deal_II_dimension>&,
     VEC&);

  template
    void VectorTools::interpolate
    (const Mapping<deal_II_dimension>&,
     const MGDoFHandler<deal_II_dimension>&,
     const Function<deal_II_dimension>&,
     VEC&);
  template
    void VectorTools::interpolate
    (const MGDoFHandler<deal_II_dimension>&,
     const Function<deal_II_dimension>&,
     VEC&);

  template
    void VectorTools::interpolate
    (const DoFHandler<deal_II_dimension>&,
     const DoFHandler<deal_II_dimension>&,
     const FullMatrix<double>&,
     const VEC&,
     VEC&);

  template
    void VectorTools::integrate_difference<deal_II_dimension>
    (const DoFHandler<deal_II_dimension>&,
     const VEC&,
     const Function<deal_II_dimension>&,
     Vector<double>&,
     const Quadrature<deal_II_dimension>&,
     const NormType&,
     const Function<deal_II_dimension>*,
     const double);

#if deal_II_dimension != 3
  template
    void VectorTools::integrate_difference<deal_II_dimension, VEC, Vector<float>, deal_II_dimension+1>
    (const DoFHandler<deal_II_dimension, deal_II_dimension+1>&,
     const VEC&,
     const Function<deal_II_dimension+1>&,
     Vector<float>&,
     const Quadrature<deal_II_dimension>&,
     const NormType&,
     const Function<deal_II_dimension+1>*,
     const double);

  template
    void VectorTools::integrate_difference<deal_II_dimension, VEC, Vector<double>, deal_II_dimension+1 >
    (const DoFHandler<deal_II_dimension, deal_II_dimension+1>&,
     const VEC&,
     const Function<deal_II_dimension+1>&,
     Vector<double>&,
     const Quadrature<deal_II_dimension>&,
     const NormType&,
     const Function<deal_II_dimension+1>*,
     const double);

  template
    void VectorTools::integrate_difference<deal_II_dimension, VEC, Vector<float>, deal_II_dimension+1>
    (const Mapping<deal_II_dimension, deal_II_dimension+1>&, 
     const DoFHandler<deal_II_dimension, deal_II_dimension+1>&,
     const VEC&,
     const Function<deal_II_dimension+1>&,
     Vector<float>&,
     const Quadrature<deal_II_dimension>&,
     const NormType&,
     const Function<deal_II_dimension+1>*,
     const double);

  template
    void VectorTools::integrate_difference<deal_II_dimension, VEC, Vector<double>, deal_II_dimension+1 >
    (const Mapping<deal_II_dimension, deal_II_dimension+1>&, 
     const DoFHandler<deal_II_dimension, deal_II_dimension+1>&,
     const VEC&,
     const Function<deal_II_dimension+1>&,
     Vector<double>&,
     const Quadrature<deal_II_dimension>&,
     const NormType&,
     const Function<deal_II_dimension+1>*,
     const double);
#endif


  template
    void VectorTools::integrate_difference<deal_II_dimension>
    (const DoFHandler<deal_II_dimension>&,
     const VEC&,
     const Function<deal_II_dimension>&,
     Vector<float>&,
     const Quadrature<deal_II_dimension>&,
     const NormType&,
     const Function<deal_II_dimension>*,
     const double);
  template
    void VectorTools::integrate_difference<deal_II_dimension>
    (const Mapping<deal_II_dimension>&,
     const DoFHandler<deal_II_dimension>&,
     const VEC&,
     const Function<deal_II_dimension>&,
     Vector<double>&,
     const Quadrature<deal_II_dimension>&,
     const NormType&,
     const Function<deal_II_dimension>*,
     const double);
  template
    void VectorTools::integrate_difference<deal_II_dimension>
    (const Mapping<deal_II_dimension>&,
     const DoFHandler<deal_II_dimension>&,
     const VEC&,
     const Function<deal_II_dimension>&,
     Vector<float>&,
     const Quadrature<deal_II_dimension>&,
     const NormType&,
     const Function<deal_II_dimension>*,
     const double);

  template
    void VectorTools::integrate_difference<deal_II_dimension>
    (const hp::DoFHandler<deal_II_dimension>&,
     const VEC&,
     const Function<deal_II_dimension>&,
     Vector<double>&,
     const hp::QCollection<deal_II_dimension>&,
     const NormType&,
     const Function<deal_II_dimension>*,
     const double);
  template
    void VectorTools::integrate_difference<deal_II_dimension>
    (const hp::DoFHandler<deal_II_dimension>&,
     const VEC&,
     const Function<deal_II_dimension>&,
     Vector<float>&,
     const hp::QCollection<deal_II_dimension>&,
     const NormType&,
     const Function<deal_II_dimension>*,
     const double);
  template
    void VectorTools::integrate_difference<deal_II_dimension>
    (const hp::MappingCollection<deal_II_dimension>&,
     const hp::DoFHandler<deal_II_dimension>&,
     const VEC&,
     const Function<deal_II_dimension>&,
     Vector<double>&,
     const hp::QCollection<deal_II_dimension>&,
     const NormType&,
     const Function<deal_II_dimension>*,
     const double);
  template
    void VectorTools::integrate_difference<deal_II_dimension>
    (const hp::MappingCollection<deal_II_dimension>&,
     const hp::DoFHandler<deal_II_dimension>&,
     const VEC&,
     const Function<deal_II_dimension>&,
     Vector<float>&,
     const hp::QCollection<deal_II_dimension>&,
     const NormType&,
     const Function<deal_II_dimension>*,
     const double);

  template
    void VectorTools::point_difference<deal_II_dimension> (
      const DoFHandler<deal_II_dimension>&,
      const VEC&,
      const Function<deal_II_dimension>&,
      Vector<double>&,
      const Point<deal_II_dimension>&);

  template
    void VectorTools::point_difference<deal_II_dimension> (
      const Mapping<deal_II_dimension>&,
      const DoFHandler<deal_II_dimension>&,
      const VEC&,
      const Function<deal_II_dimension>&,
      Vector<double>&,
      const Point<deal_II_dimension>&);

  template
    void VectorTools::point_value<deal_II_dimension> (
      const DoFHandler<deal_II_dimension>&,
      const VEC&,
      const Point<deal_II_dimension>&,
      Vector<double>&);

  template
    double VectorTools::point_value<deal_II_dimension> (
      const DoFHandler<deal_II_dimension>&,
      const VEC&,
      const Point<deal_II_dimension>&);

  template
    void VectorTools::point_value<deal_II_dimension> (
      const Mapping<deal_II_dimension>&,
      const DoFHandler<deal_II_dimension>&,
      const VEC&,
      const Point<deal_II_dimension>&,
      Vector<double>&);

  template
    double VectorTools::point_value<deal_II_dimension> (
      const Mapping<deal_II_dimension>&,
      const DoFHandler<deal_II_dimension>&,
      const VEC&,
      const Point<deal_II_dimension>&);

  template
    double VectorTools::compute_mean_value<deal_II_dimension>
    (const Mapping<deal_II_dimension>&,
     const DoFHandler<deal_II_dimension>&,
     const Quadrature<deal_II_dimension>&,
     const VEC&,
     const unsigned int);
  template
    double VectorTools::compute_mean_value<deal_II_dimension>
    (const DoFHandler<deal_II_dimension>&,
     const Quadrature<deal_II_dimension>&,
     const VEC&,
     const unsigned int);

#if deal_II_dimension < 3
  template
    double VectorTools::compute_mean_value<deal_II_dimension>
    (const Mapping<deal_II_dimension,deal_II_dimension+1>&,
     const DoFHandler<deal_II_dimension,deal_II_dimension+1>&,
     const Quadrature<deal_II_dimension>&,
     const VEC&,
     const unsigned int);
  template
    double VectorTools::compute_mean_value<deal_II_dimension>
    (const DoFHandler<deal_II_dimension,deal_II_dimension+1>&,
     const Quadrature<deal_II_dimension>&,
     const VEC&,
     const unsigned int);
#endif

  template
    void VectorTools::project
    (const Mapping<deal_II_dimension>      &,
     const DoFHandler<deal_II_dimension>   &,
     const ConstraintMatrix                &,
     const Quadrature<deal_II_dimension>   &,
     const Function<deal_II_dimension>     &,
     VEC                                   &,
     const bool,
     const Quadrature<deal_II_dimension-1> &,
     const bool);

  template
    void VectorTools::project
    (const DoFHandler<deal_II_dimension>   &,
     const ConstraintMatrix                &,
     const Quadrature<deal_II_dimension>   &,
     const Function<deal_II_dimension>     &,
     VEC                                   &,
     const bool,
     const Quadrature<deal_II_dimension-1> &,
     const bool);


#if deal_II_dimension != 3
  template
    void VectorTools::interpolate
    (const Mapping<deal_II_dimension,deal_II_dimension+1>&,
     const DoFHandler<deal_II_dimension,deal_II_dimension+1>&,
     const Function<deal_II_dimension+1>&,
     VEC&);
  template
    void VectorTools::interpolate
    (const DoFHandler<deal_II_dimension,deal_II_dimension+1>&,
     const Function<deal_II_dimension+1>&,
     VEC&);

  template
    void VectorTools::project
    (const Mapping<deal_II_dimension,deal_II_dimension+1>      &,
     const DoFHandler<deal_II_dimension,deal_II_dimension+1>   &,
     const ConstraintMatrix                &,
     const Quadrature<deal_II_dimension>   &,
     const Function<deal_II_dimension+1>     &,
     VEC                                   &,
     const bool,
     const Quadrature<deal_II_dimension-1> &,
     const bool);

  template
    void VectorTools::project
    (const DoFHandler<deal_II_dimension,deal_II_dimension+1>   &,
     const ConstraintMatrix                &,
     const Quadrature<deal_II_dimension>   &,
     const Function<deal_II_dimension+1>     &,
     VEC                                   &,
     const bool,
     const Quadrature<deal_II_dimension-1> &,
     const bool);
#endif

}


for ( deal_II_dimension : DIMENSIONS )
{
template
void VectorTools::create_right_hand_side<deal_II_dimension>
(const Mapping<deal_II_dimension>    &,
 const DoFHandler<deal_II_dimension> &,
 const Quadrature<deal_II_dimension> &,
 const Function<deal_II_dimension>   &,
 Vector<double>                      &);
template
void VectorTools::create_right_hand_side<deal_II_dimension>
(const DoFHandler<deal_II_dimension> &,
 const Quadrature<deal_II_dimension> &,
 const Function<deal_II_dimension>   &,
 Vector<double>                      &);

template
void VectorTools::create_right_hand_side<deal_II_dimension>
(const hp::MappingCollection<deal_II_dimension>    &,
 const hp::DoFHandler<deal_II_dimension> &,
 const hp::QCollection<deal_II_dimension> &,
 const Function<deal_II_dimension>   &,
 Vector<double>                      &);
template
void VectorTools::create_right_hand_side<deal_II_dimension>
(const hp::DoFHandler<deal_II_dimension> &,
 const hp::QCollection<deal_II_dimension> &,
 const Function<deal_II_dimension>   &,
 Vector<double>                      &);

template
void VectorTools::create_point_source_vector<deal_II_dimension>
(const Mapping<deal_II_dimension>    &,
 const DoFHandler<deal_II_dimension> &,
 const Point<deal_II_dimension>      &,
 Vector<double>                      &);
template
void VectorTools::create_point_source_vector<deal_II_dimension>
(const DoFHandler<deal_II_dimension> &,
 const Point<deal_II_dimension>      &,
 Vector<double>                      &);

template
void VectorTools::create_point_source_vector<deal_II_dimension>
(const hp::MappingCollection<deal_II_dimension>    &,
 const hp::DoFHandler<deal_II_dimension> &,
 const Point<deal_II_dimension>      &,
 Vector<double>                      &);
template
void VectorTools::create_point_source_vector<deal_II_dimension>
(const hp::DoFHandler<deal_II_dimension> &,
 const Point<deal_II_dimension>      &,
 Vector<double>                      &);

#if deal_II_dimension > 1
template
void
VectorTools::create_boundary_right_hand_side<deal_II_dimension>
(const Mapping<deal_II_dimension>    &,
 const DoFHandler<deal_II_dimension> &,
 const Quadrature<deal_II_dimension-1> &,
 const Function<deal_II_dimension>   &,
 Vector<double>                      &,
 const std::set<unsigned char> &);
#endif

template
void
VectorTools::create_boundary_right_hand_side<deal_II_dimension>
(const DoFHandler<deal_II_dimension> &,
 const Quadrature<deal_II_dimension-1> &,
 const Function<deal_II_dimension>   &,
 Vector<double>                      &,
 const std::set<unsigned char> &);

#if deal_II_dimension > 1
template
void
VectorTools::create_boundary_right_hand_side<deal_II_dimension>
(const hp::MappingCollection<deal_II_dimension>    &,
 const hp::DoFHandler<deal_II_dimension> &,
 const hp::QCollection<deal_II_dimension-1> &,
 const Function<deal_II_dimension>   &,
 Vector<double>                      &,
 const std::set<unsigned char> &);
#endif

template
void
VectorTools::create_boundary_right_hand_side<deal_II_dimension>
(const hp::DoFHandler<deal_II_dimension> &,
 const hp::QCollection<deal_II_dimension-1> &,
 const Function<deal_II_dimension>   &,
 Vector<double>                      &,
 const std::set<unsigned char> &);

template
void VectorTools::interpolate_boundary_values (
  const DoFHandler<deal_II_dimension> &,
  const unsigned char,
  const Function<deal_II_dimension>   &,
  std::map<unsigned int,double>       &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const hp::DoFHandler<deal_II_dimension> &,
  const unsigned char,
  const Function<deal_II_dimension>   &,
  std::map<unsigned int,double>       &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const MGDoFHandler<deal_II_dimension> &,
  const unsigned char,
  const Function<deal_II_dimension>   &,
  std::map<unsigned int,double>       &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const DoFHandler<deal_II_dimension> &,
  const unsigned char,
  const Function<deal_II_dimension>   &,
  ConstraintMatrix                    &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const hp::DoFHandler<deal_II_dimension> &,
  const unsigned char,
  const Function<deal_II_dimension>   &,
  ConstraintMatrix                    &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const MGDoFHandler<deal_II_dimension> &,
  const unsigned char,
  const Function<deal_II_dimension>   &,
  ConstraintMatrix                    &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const Mapping<deal_II_dimension>    &,
  const DoFHandler<deal_II_dimension> &,
  const FunctionMap<deal_II_dimension>::type   &,
  ConstraintMatrix                    &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const Mapping<deal_II_dimension>    &,
  const hp::DoFHandler<deal_II_dimension> &,
  const FunctionMap<deal_II_dimension>::type   &,
  ConstraintMatrix                    &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const Mapping<deal_II_dimension>    &,
  const MGDoFHandler<deal_II_dimension> &,
  const FunctionMap<deal_II_dimension>::type   &,
  ConstraintMatrix                    &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const DoFHandler<deal_II_dimension> &,
  const FunctionMap<deal_II_dimension>::type   &,
  ConstraintMatrix                    &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const hp::DoFHandler<deal_II_dimension> &,
  const FunctionMap<deal_II_dimension>::type   &,
  ConstraintMatrix                    &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const MGDoFHandler<deal_II_dimension> &,
  const FunctionMap<deal_II_dimension>::type   &,
  ConstraintMatrix                    &,
  const std::vector<bool>    &);

#if deal_II_dimension < 3
template
void VectorTools::interpolate_boundary_values (
  const DoFHandler<deal_II_dimension,deal_II_dimension+1> &,
  const unsigned char,
  const Function<deal_II_dimension+1>   &,
  std::map<unsigned int,double>       &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const hp::DoFHandler<deal_II_dimension,deal_II_dimension+1> &,
  const unsigned char,
  const Function<deal_II_dimension+1>   &,
  std::map<unsigned int,double>       &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const MGDoFHandler<deal_II_dimension,deal_II_dimension+1> &,
  const unsigned char,
  const Function<deal_II_dimension+1>   &,
  std::map<unsigned int,double>       &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const DoFHandler<deal_II_dimension,deal_II_dimension+1> &,
  const unsigned char,
  const Function<deal_II_dimension+1>   &,
  ConstraintMatrix                    &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const hp::DoFHandler<deal_II_dimension,deal_II_dimension+1> &,
  const unsigned char,
  const Function<deal_II_dimension+1>   &,
  ConstraintMatrix                    &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const MGDoFHandler<deal_II_dimension,deal_II_dimension+1> &,
  const unsigned char,
  const Function<deal_II_dimension+1>   &,
  ConstraintMatrix                    &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const Mapping<deal_II_dimension,deal_II_dimension+1>    &,
  const DoFHandler<deal_II_dimension,deal_II_dimension+1> &,
  const FunctionMap<deal_II_dimension+1>::type   &,
  ConstraintMatrix                    &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const Mapping<deal_II_dimension,deal_II_dimension+1>    &,
  const hp::DoFHandler<deal_II_dimension,deal_II_dimension+1> &,
  const FunctionMap<deal_II_dimension+1>::type   &,
  ConstraintMatrix                    &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const Mapping<deal_II_dimension,deal_II_dimension+1>    &,
  const MGDoFHandler<deal_II_dimension,deal_II_dimension+1> &,
  const FunctionMap<deal_II_dimension+1>::type   &,
  ConstraintMatrix                    &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const DoFHandler<deal_II_dimension,deal_II_dimension+1> &,
  const FunctionMap<deal_II_dimension+1>::type   &,
  ConstraintMatrix                    &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const hp::DoFHandler<deal_II_dimension,deal_II_dimension+1> &,
  const FunctionMap<deal_II_dimension+1>::type   &,
  ConstraintMatrix                    &,
  const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values (
  const MGDoFHandler<deal_II_dimension,deal_II_dimension+1> &,
  const FunctionMap<deal_II_dimension+1>::type   &,
  ConstraintMatrix                    &,
  const std::vector<bool>    &);
#endif

#if deal_II_dimension > 1
template
void VectorTools::project_boundary_values<deal_II_dimension>
(const Mapping<deal_II_dimension>     &,
 const DoFHandler<deal_II_dimension>  &,
 const FunctionMap<deal_II_dimension>::type &,
 const Quadrature<deal_II_dimension-1>&,
 std::map<unsigned int,double>&, std::vector<unsigned int>);
#endif

template
void VectorTools::project_boundary_values<deal_II_dimension>
(const DoFHandler<deal_II_dimension>  &,
 const FunctionMap<deal_II_dimension>::type &,
 const Quadrature<deal_II_dimension-1>&,
 std::map<unsigned int,double>&, std::vector<unsigned int>);


template
void VectorTools::project_boundary_values<deal_II_dimension>
(const Mapping<deal_II_dimension>     &,
 const DoFHandler<deal_II_dimension>  &,
 const FunctionMap<deal_II_dimension>::type &,
 const Quadrature<deal_II_dimension-1>&,
 ConstraintMatrix&, std::vector<unsigned int>);

template
void VectorTools::project_boundary_values<deal_II_dimension>
(const DoFHandler<deal_II_dimension>  &,
 const FunctionMap<deal_II_dimension>::type &,
 const Quadrature<deal_II_dimension-1>&,
 ConstraintMatrix&, std::vector<unsigned int>);


#if deal_II_dimension != 1
template
void VectorTools::project_boundary_values_curl_conforming<deal_II_dimension>
(const DoFHandler<deal_II_dimension>&,
 const unsigned int,
 const Function<deal_II_dimension>&,
 const unsigned char,
 ConstraintMatrix&,
 const Mapping<deal_II_dimension>&);
template
void VectorTools::project_boundary_values_curl_conforming<deal_II_dimension>
(const hp::DoFHandler<deal_II_dimension>&,
 const unsigned int,
 const Function<deal_II_dimension>&,
 const unsigned char,
 ConstraintMatrix&,
 const hp::MappingCollection<deal_II_dimension>&);
template
void VectorTools::project_boundary_values_div_conforming<deal_II_dimension>
(const DoFHandler<deal_II_dimension>&,
 const unsigned int,
 const Function<deal_II_dimension>&,
 const unsigned char,
 ConstraintMatrix&,
 const Mapping<deal_II_dimension>&);
template
void VectorTools::project_boundary_values_div_conforming<deal_II_dimension>
(const hp::DoFHandler<deal_II_dimension>&,
 const unsigned int,
 const Function<deal_II_dimension>&,
 const unsigned char,
 ConstraintMatrix&,
 const hp::MappingCollection<deal_II_dimension>&);
template
void
VectorTools::compute_no_normal_flux_constraints (const DoFHandler<deal_II_dimension> &dof_handler,
						 const unsigned int     first_vector_component,
						 const std::set<unsigned char> &boundary_ids,
						 ConstraintMatrix      &constraints,
						 const Mapping<deal_II_dimension>    &mapping);
#endif



template
void VectorTools::interpolate_boundary_values
(const Mapping<deal_II_dimension>    &,
 const DoFHandler<deal_II_dimension> &,
 const FunctionMap<deal_II_dimension>::type &,
 std::map<unsigned int,double>       &,
 const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values
(const Mapping<deal_II_dimension>    &,
 const hp::DoFHandler<deal_II_dimension> &,
 const FunctionMap<deal_II_dimension>::type &,
 std::map<unsigned int,double>       &,
 const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values
(const Mapping<deal_II_dimension>    &,
 const MGDoFHandler<deal_II_dimension> &,
 const FunctionMap<deal_II_dimension>::type &,
 std::map<unsigned int,double>       &,
 const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values
(const Mapping<deal_II_dimension>    &,
 const DoFHandler<deal_II_dimension> &,
 const unsigned char,
 const Function<deal_II_dimension>   &,
 std::map<unsigned int,double>       &,
 const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values
(const Mapping<deal_II_dimension>    &,
 const hp::DoFHandler<deal_II_dimension> &,
 const unsigned char,
 const Function<deal_II_dimension>   &,
 ConstraintMatrix       &,
 const std::vector<bool>    &);

#if deal_II_dimension < 3
template
void VectorTools::interpolate_boundary_values
(const Mapping<deal_II_dimension,deal_II_dimension+1>    &,
 const DoFHandler<deal_II_dimension,deal_II_dimension+1> &,
 const FunctionMap<deal_II_dimension+1>::type &,
 std::map<unsigned int,double>       &,
 const std::vector<bool>    &);

template
void VectorTools::interpolate_boundary_values
(const Mapping<deal_II_dimension,deal_II_dimension+1>    &,
 const DoFHandler<deal_II_dimension,deal_II_dimension+1> &,
 const unsigned char,
 const Function<deal_II_dimension+1>   &,
 std::map<unsigned int,double>       &,
 const std::vector<bool>    &);
#endif


template
void
VectorTools::interpolate_boundary_values
(const DoFHandler<deal_II_dimension>         &,
 const FunctionMap<deal_II_dimension>::type &,
 std::map<unsigned int,double> &,
 const std::vector<bool>       &);


#if deal_II_dimension != 3

template
void VectorTools::create_right_hand_side<deal_II_dimension,deal_II_dimension+1>
(const Mapping<deal_II_dimension,deal_II_dimension+1>    &,
 const DoFHandler<deal_II_dimension,deal_II_dimension+1> &,
 const Quadrature<deal_II_dimension> &,
 const Function<deal_II_dimension+1>   &,
 Vector<double>                      &);
template
void VectorTools::create_right_hand_side<deal_II_dimension,deal_II_dimension+1>
(const DoFHandler<deal_II_dimension,deal_II_dimension+1> &,
 const Quadrature<deal_II_dimension> &,
 const Function<deal_II_dimension+1>   &,
 Vector<double>                      &);

// template
// void VectorTools::create_right_hand_side<deal_II_dimension,deal_II_dimension+1>
// (const hp::MappingCollection<deal_II_dimension,deal_II_dimension+1>    &,
//  const hp::DoFHandler<deal_II_dimension,deal_II_dimension+1> &,
//  const hp::QCollection<deal_II_dimension> &,
//  const Function<deal_II_dimension+1>   &,
//  Vector<double>                      &);
// template
// void VectorTools::create_right_hand_side<deal_II_dimension,deal_II_dimension+1>
// (const hp::DoFHandler<deal_II_dimension,deal_II_dimension+1> &,
//  const hp::QCollection<deal_II_dimension> &,
//  const Function<deal_II_dimension+1>   &,
//  Vector<double>                      &);

#endif
}
