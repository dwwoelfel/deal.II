// ---------------------------------------------------------------------
// $Id$
//
// Copyright (C) 2010 - 2013 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE at
// the top level of the deal.II distribution.
//
// ---------------------------------------------------------------------


for (VEC : SERIAL_VECTORS; DH : DOFHANDLER_TEMPLATES; deal_II_dimension : DIMENSIONS)
{
// codim=0

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension>,deal_II_dimension,deal_II_dimension>::
  add_data_vector<VEC> (const VEC            &,
                       const std::string   &,
                       const DataVectorType,
                     const std::vector<DataComponentInterpretation::DataComponentInterpretation> &);

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension>,deal_II_dimension,deal_II_dimension>::
  add_data_vector<VEC> (const VEC                       &,
                     const std::vector<std::string> &,
                     const DataVectorType,
                     const std::vector<DataComponentInterpretation::DataComponentInterpretation> &);

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension>,deal_II_dimension,deal_II_dimension>::
  add_data_vector<VEC> (const VEC                 &,
                      const DataPostprocessor<DH<deal_II_dimension,deal_II_dimension>::space_dimension> &);

// stuff needed for face data

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension>,deal_II_dimension-1,deal_II_dimension>::
  add_data_vector<VEC> (const VEC            &,
                       const std::string   &,
                       const DataVectorType,
                     const std::vector<DataComponentInterpretation::DataComponentInterpretation> &);

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension>,deal_II_dimension-1,deal_II_dimension>::
  add_data_vector<VEC> (const VEC                       &,
                     const std::vector<std::string> &,
                     const DataVectorType,
                     const std::vector<DataComponentInterpretation::DataComponentInterpretation> &);

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension>,deal_II_dimension-1,deal_II_dimension>::
  add_data_vector<VEC> (const VEC                 &,
                      const DataPostprocessor<DH<deal_II_dimension,deal_II_dimension>::space_dimension> &);

// things for DataOutRotation

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension>,deal_II_dimension+1,deal_II_dimension+1>::
  add_data_vector<VEC> (const VEC            &,
                       const std::string   &,
                       const DataVectorType,
                     const std::vector<DataComponentInterpretation::DataComponentInterpretation> &);

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension>,deal_II_dimension+1,deal_II_dimension+1>::
  add_data_vector<VEC> (const VEC                       &,
                     const std::vector<std::string> &,
                     const DataVectorType,
                     const std::vector<DataComponentInterpretation::DataComponentInterpretation> &);

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension>,deal_II_dimension+1,deal_II_dimension+1>::
  add_data_vector<VEC> (const VEC                 &,
                      const DataPostprocessor<DH<deal_II_dimension,deal_II_dimension>::space_dimension> &);

// codim 1

  #if deal_II_dimension < 3
  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension+1>,deal_II_dimension,deal_II_dimension+1>::
  add_data_vector<VEC> (const VEC            &,
                       const std::string   &,
                       const DataVectorType,
                     const std::vector<DataComponentInterpretation::DataComponentInterpretation> &);

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension+1>,deal_II_dimension,deal_II_dimension+1>::
  add_data_vector<VEC> (const VEC                       &,
                     const std::vector<std::string> &,
                     const DataVectorType,
                     const std::vector<DataComponentInterpretation::DataComponentInterpretation> &);

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension+1>,deal_II_dimension,deal_II_dimension+1>::
  add_data_vector<VEC> (const VEC                 &,
                      const DataPostprocessor<DH<deal_II_dimension,deal_II_dimension+1>::space_dimension> &);
  #endif



// codim 2

  #if deal_II_dimension == 3
  template void
  DataOut_DoFData<DH<1,3>,1,3>::
  add_data_vector<VEC> (const VEC            &,
                       const std::string   &,
                       const DataVectorType,
                     const std::vector<DataComponentInterpretation::DataComponentInterpretation> &);

  template void
  DataOut_DoFData<DH<1,3>,1,3>::
  add_data_vector<VEC> (const VEC                       &,
                     const std::vector<std::string> &,
                     const DataVectorType,
                     const std::vector<DataComponentInterpretation::DataComponentInterpretation> &);

  template void
  DataOut_DoFData<DH<1,3>,1,3>::
  add_data_vector<VEC> (const VEC                 &,
                      const DataPostprocessor<DH<1,3>::space_dimension> &);
  #endif

}



for (DH : DOFHANDLER_TEMPLATES; deal_II_dimension : DIMENSIONS)
{
// codim=0

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension>,deal_II_dimension,deal_II_dimension>::
  add_data_vector<IndexSet> (const IndexSet            &,
                       const std::string   &,
                       const DataVectorType,
                     const std::vector<DataComponentInterpretation::DataComponentInterpretation> &);

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension>,deal_II_dimension,deal_II_dimension>::
  add_data_vector<IndexSet> (const IndexSet                       &,
                     const std::vector<std::string> &,
                     const DataVectorType,
                     const std::vector<DataComponentInterpretation::DataComponentInterpretation> &);

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension>,deal_II_dimension,deal_II_dimension>::
  add_data_vector<IndexSet> (const IndexSet                 &,
                      const DataPostprocessor<DH<deal_II_dimension,deal_II_dimension>::space_dimension> &);

// stuff needed for face data

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension>,deal_II_dimension-1,deal_II_dimension>::
  add_data_vector<IndexSet> (const IndexSet            &,
                       const std::string   &,
                       const DataVectorType,
                     const std::vector<DataComponentInterpretation::DataComponentInterpretation> &);

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension>,deal_II_dimension-1,deal_II_dimension>::
  add_data_vector<IndexSet> (const IndexSet                       &,
                     const std::vector<std::string> &,
                     const DataVectorType,
                     const std::vector<DataComponentInterpretation::DataComponentInterpretation> &);

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension>,deal_II_dimension-1,deal_II_dimension>::
  add_data_vector<IndexSet> (const IndexSet                 &,
                      const DataPostprocessor<DH<deal_II_dimension,deal_II_dimension>::space_dimension> &);

// things for DataOutRotation

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension>,deal_II_dimension+1,deal_II_dimension+1>::
  add_data_vector<IndexSet> (const IndexSet            &,
                       const std::string   &,
                       const DataVectorType,
                     const std::vector<DataComponentInterpretation::DataComponentInterpretation> &);

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension>,deal_II_dimension+1,deal_II_dimension+1>::
  add_data_vector<IndexSet> (const IndexSet                       &,
                     const std::vector<std::string> &,
                     const DataVectorType,
                     const std::vector<DataComponentInterpretation::DataComponentInterpretation> &);

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension>,deal_II_dimension+1,deal_II_dimension+1>::
  add_data_vector<IndexSet> (const IndexSet                 &,
                      const DataPostprocessor<DH<deal_II_dimension,deal_II_dimension>::space_dimension> &);

// codim 1

  #if deal_II_dimension < 3
  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension+1>,deal_II_dimension,deal_II_dimension+1>::
  add_data_vector<IndexSet> (const IndexSet            &,
                       const std::string   &,
                       const DataVectorType,
                     const std::vector<DataComponentInterpretation::DataComponentInterpretation> &);

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension+1>,deal_II_dimension,deal_II_dimension+1>::
  add_data_vector<IndexSet> (const IndexSet                       &,
                     const std::vector<std::string> &,
                     const DataVectorType,
                     const std::vector<DataComponentInterpretation::DataComponentInterpretation> &);

  template void
  DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension+1>,deal_II_dimension,deal_II_dimension+1>::
  add_data_vector<IndexSet> (const IndexSet                 &,
                      const DataPostprocessor<DH<deal_II_dimension,deal_II_dimension+1>::space_dimension> &);
  #endif

}



for (DH : DOFHANDLER_TEMPLATES; deal_II_dimension : DIMENSIONS)
{
  template class DataOut_DoFData<DH<deal_II_dimension>,deal_II_dimension>;
  template class DataOut_DoFData<DH<deal_II_dimension>,deal_II_dimension+1>;

  #if deal_II_dimension < 3
  template class DataOut_DoFData<DH<deal_II_dimension>,deal_II_dimension,deal_II_dimension+1>;
  template class DataOut_DoFData<DH<deal_II_dimension,deal_II_dimension+1>,deal_II_dimension,deal_II_dimension+1>;
  #endif

  #if deal_II_dimension >= 2
  template class DataOut_DoFData<DH<deal_II_dimension>,deal_II_dimension-1,deal_II_dimension>;
  #endif

  template class DataOut<deal_II_dimension, DH<deal_II_dimension> >;
  #if deal_II_dimension < 3
  template class DataOut<deal_II_dimension, DH<deal_II_dimension,deal_II_dimension+1> >;
  #endif

  #if deal_II_dimension == 3
     template class DataOut_DoFData<DH<1>,1,3>;
     template class DataOut_DoFData<DH<1,3>,1,3>;
     template class DataOut<1, DH<1,3> >;
  #endif

}
