//---------------------------------------------------------------------------
//    $Id$
//    Version: $Name$
//
//    Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010 by the deal.II authors
//
//    This file is subject to QPL and may not be  distributed
//    without copyright and license information. Please refer
//    to the file deal.II/doc/license.html for the  text  and
//    further information on this license.
//
//---------------------------------------------------------------------------


for (deal_II_dimension : DIMENSIONS)
{
  template void
    GridGenerator::hyper_cube<deal_II_dimension> (
      Triangulation<deal_II_dimension> &, const double, const double);

  template void
    GridGenerator::subdivided_hyper_cube<deal_II_dimension> (
      Triangulation<deal_II_dimension> &,
      const unsigned int, const double, const double);

  template void
    GridGenerator::hyper_rectangle<deal_II_dimension> (
      Triangulation<deal_II_dimension> &,
      const Point<deal_II_dimension>&, const Point<deal_II_dimension>&,
      const bool);

  template void
    GridGenerator::subdivided_hyper_rectangle<deal_II_dimension>
    (Triangulation<deal_II_dimension> &,
     const std::vector<unsigned int>&,
     const Point<deal_II_dimension>&,
     const Point<deal_II_dimension>&, bool);

  template void
    GridGenerator::subdivided_hyper_rectangle<deal_II_dimension>
    (Triangulation<deal_II_dimension> &,
     const std::vector<std::vector<double> >&,
     const Point<deal_II_dimension>&,
     const Point<deal_II_dimension>&, bool);

#if deal_II_dimension > 1
  template void
    GridGenerator::enclosed_hyper_cube (
      Triangulation<deal_II_dimension>&, double, double, double, bool);

  template void
    GridGenerator::hyper_ball (
      Triangulation<deal_II_dimension>&,
      const Point<deal_II_dimension>&, double);

  template void
    GridGenerator::cylinder (
      Triangulation<deal_II_dimension>&, double, double);

  template void
    GridGenerator::truncated_cone (
      Triangulation<deal_II_dimension>&, double, double, double);

  template void
    GridGenerator::hyper_L (
      Triangulation<deal_II_dimension>&, double, double);

  template void
    GridGenerator::hyper_cube_slit (
      Triangulation<deal_II_dimension>&, double, double, bool);

  template void
    GridGenerator::hyper_shell (
      Triangulation<deal_II_dimension>&,
      const Point<deal_II_dimension>&, double, double, unsigned int, bool);


  template void
    GridGenerator::cylinder_shell (
      Triangulation<deal_II_dimension>&,
      double, double, double, unsigned int, unsigned int);

  template void
    GridGenerator::half_hyper_ball (
      Triangulation<deal_II_dimension>&, const Point<deal_II_dimension>&, double);

  template void
    GridGenerator::half_hyper_shell (
      Triangulation<deal_II_dimension>&,
      const Point<deal_II_dimension>&, double, double, unsigned int);


  template void
    GridGenerator::hyper_cube_with_cylindrical_hole (
      Triangulation<deal_II_dimension> &,
      const double, const double, const double, const unsigned int, bool);

  template void
    GridGenerator::
    laplace_transformation<deal_II_dimension> (Triangulation<deal_II_dimension> &,
					       const std::map<unsigned int,Point<deal_II_dimension> > &);
#endif

#if deal_II_dimension != 3

  template void
    GridGenerator::hyper_cube<deal_II_dimension, deal_II_dimension+1> (
      Triangulation<deal_II_dimension,deal_II_dimension+1> &, const double, const double);
  template void
    GridGenerator::hyper_rectangle<deal_II_dimension,deal_II_dimension+1> (
      Triangulation<deal_II_dimension,deal_II_dimension+1> &,
      const Point<deal_II_dimension+1>&, const Point<deal_II_dimension+1>&,
      const bool);

#endif
 }

