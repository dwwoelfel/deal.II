//----------------------------------------------------------------
//    $Id$
//    Version: $Name$
//
//    Copyright (C) 2001, 2002 by the deal.II authors
//
//    This file is subject to QPL and may not be  distributed
//    without copyright and license information. Please refer
//    to the file deal.II/doc/license.html for the  text  and
//    further information on this license.
//
//----------------------------------------------------------------

// Transfer matrices for finite elements


// only compile this file if in 3d
#if deal_II_dimension == 3

#include <fe/fe_nedelec.h>

namespace FE_Nedelec_3d
{
  static const double q1_into_q1_refined_0[] =
  {
//  	1., 0., 0., 0., 0., 0., 0., 0.,
//  	13.5/27., 13.5/27., 0., 0., 0., 0., 0., 0.,
//  	6.75/27., 6.75/27., 6.75/27., 6.75/27., 0., 0., 0., 0.,
//  	13.5/27., 0., 0., 13.5/27., 0., 0., 0., 0.,
//  	13.5/27., 0., 0., 0., 13.5/27., 0., 0., 0.,
//  	6.75/27., 6.75/27., 0., 0., 6.75/27., 6.75/27., 0., 0.,
//  	3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27.,
//  	6.75/27., 0., 0., 6.75/27., 6.75/27., 0., 0., 6.75/27.,
  };

  static const double q1_into_q1_refined_1[] =
  {
//  	13.5/27., 13.5/27., 0., 0., 0., 0., 0., 0.,
//  	0., 1., 0., 0., 0., 0., 0., 0.,
//  	0., 13.5/27., 13.5/27., 0., 0., 0., 0., 0.,
//  	6.75/27., 6.75/27., 6.75/27., 6.75/27., 0., 0., 0., 0.,
//  	6.75/27., 6.75/27., 0., 0., 6.75/27., 6.75/27., 0., 0.,
//  	0., 13.5/27., 0., 0., 0., 13.5/27., 0., 0.,
//  	0., 6.75/27., 6.75/27., 0., 0., 6.75/27., 6.75/27., 0.,
//  	3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27.,
  };

  static const double q1_into_q1_refined_2[] =
  {
//  	6.75/27., 6.75/27., 6.75/27., 6.75/27., 0., 0., 0., 0.,
//  	0., 13.5/27., 13.5/27., 0., 0., 0., 0., 0.,
//  	0., 0., 1., 0., 0., 0., 0., 0.,
//  	0., 0., 13.5/27., 13.5/27., 0., 0., 0., 0.,
//  	3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27.,
//  	0., 6.75/27., 6.75/27., 0., 0., 6.75/27., 6.75/27., 0.,
//  	0., 0., 13.5/27., 0., 0., 0., 13.5/27., 0.,
//  	0., 0., 6.75/27., 6.75/27., 0., 0., 6.75/27., 6.75/27.,
  };

  static const double q1_into_q1_refined_3[] =
  {
//  	13.5/27., 0., 0., 13.5/27., 0., 0., 0., 0.,
//  	6.75/27., 6.75/27., 6.75/27., 6.75/27., 0., 0., 0., 0.,
//  	0., 0., 13.5/27., 13.5/27., 0., 0., 0., 0.,
//  	0., 0., 0., 1., 0., 0., 0., 0.,
//  	6.75/27., 0., 0., 6.75/27., 6.75/27., 0., 0., 6.75/27.,
//  	3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27.,
//  	0., 0., 6.75/27., 6.75/27., 0., 0., 6.75/27., 6.75/27.,
//  	0., 0., 0., 13.5/27., 0., 0., 0., 13.5/27.,
  };

  static const double q1_into_q1_refined_4[] =
  {
//  	13.5/27., 0., 0., 0., 13.5/27., 0., 0., 0.,
//  	6.75/27., 6.75/27., 0., 0., 6.75/27., 6.75/27., 0., 0.,
//  	3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27.,
//  	6.75/27., 0., 0., 6.75/27., 6.75/27., 0., 0., 6.75/27.,
//  	0., 0., 0., 0., 1., 0., 0., 0.,
//  	0., 0., 0., 0., 13.5/27., 13.5/27., 0., 0.,
//  	0., 0., 0., 0., 6.75/27., 6.75/27., 6.75/27., 6.75/27.,
//  	0., 0., 0., 0., 13.5/27., 0., 0., 13.5/27.,
  };

  static const double q1_into_q1_refined_5[] =
  {
//  	6.75/27., 6.75/27., 0., 0., 6.75/27., 6.75/27., 0., 0.,
//  	0., 13.5/27., 0., 0., 0., 13.5/27., 0., 0.,
//  	0., 6.75/27., 6.75/27., 0., 0., 6.75/27., 6.75/27., 0.,
//  	3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27.,
//  	0., 0., 0., 0., 13.5/27., 13.5/27., 0., 0.,
//  	0., 0., 0., 0., 0., 1., 0., 0.,
//  	0., 0., 0., 0., 0., 13.5/27., 13.5/27., 0.,
//  	0., 0., 0., 0., 6.75/27., 6.75/27., 6.75/27., 6.75/27.,
  };

  static const double q1_into_q1_refined_6[] =
  {
//  	3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27.,
//  	0., 6.75/27., 6.75/27., 0., 0., 6.75/27., 6.75/27., 0.,
//  	0., 0., 13.5/27., 0., 0., 0., 13.5/27., 0.,
//  	0., 0., 6.75/27., 6.75/27., 0., 0., 6.75/27., 6.75/27.,
//  	0., 0., 0., 0., 6.75/27., 6.75/27., 6.75/27., 6.75/27.,
//  	0., 0., 0., 0., 0., 13.5/27., 13.5/27., 0.,
//  	0., 0., 0., 0., 0., 0., 1., 0.,
//  	0., 0., 0., 0., 0., 0., 13.5/27., 13.5/27.,
  };

  static const double q1_into_q1_refined_7[] =
  {
//  	6.75/27., 0., 0., 6.75/27., 6.75/27., 0., 0., 6.75/27.,
//  	3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27., 3.375/27.,
//  	0., 0., 6.75/27., 6.75/27., 0., 0., 6.75/27., 6.75/27.,
//  	0., 0., 0., 13.5/27., 0., 0., 0., 13.5/27.,
//  	0., 0., 0., 0., 13.5/27., 0., 0., 13.5/27.,
//  	0., 0., 0., 0., 6.75/27., 6.75/27., 6.75/27., 6.75/27.,
//  	0., 0., 0., 0., 0., 0., 13.5/27., 13.5/27.,
//  	0., 0., 0., 0., 0., 0., 0., 1.,
  };

};  // namespace FE_Nedelec_3d


// embedding matrices

template <>
const double * const 
FE_Nedelec<3>::Matrices::embedding[][GeometryInfo<3>::children_per_cell] =
{
  { FE_Nedelec_3d::q1_into_q1_refined_0, FE_Nedelec_3d::q1_into_q1_refined_1,
      FE_Nedelec_3d::q1_into_q1_refined_2, FE_Nedelec_3d::q1_into_q1_refined_3,
      FE_Nedelec_3d::q1_into_q1_refined_4, FE_Nedelec_3d::q1_into_q1_refined_5,
      FE_Nedelec_3d::q1_into_q1_refined_6, FE_Nedelec_3d::q1_into_q1_refined_7 }
};


template <>
const unsigned int
FE_Nedelec<3>::Matrices::n_embedding_matrices
  = sizeof(FE_Nedelec<3>::Matrices::embedding) /
    sizeof(FE_Nedelec<3>::Matrices::embedding[0]);



// Constraint matrices

namespace FE_Nedelec_3d 
{
  static const double constraint_q1[] =
  {
//TODO[WB]	
//  	.25,.25,.25,.25,
//  	.5,.5,0.,0.,
//  	0.,.5,.5,0.,
//  	0.,0.,.5,.5,
//  	.5,0.,0.,.5
  };

};



template <>
const double * const 
FE_Nedelec<3>::Matrices::constraint_matrices[] =
{
  FE_Nedelec_3d::constraint_q1
};



template <>
const unsigned int 
FE_Nedelec<3>::Matrices::n_constraint_matrices
  = sizeof(FE_Nedelec<3>::Matrices::constraint_matrices) /
    sizeof(FE_Nedelec<3>::Matrices::constraint_matrices[0]);



#else // #if deal_II_dimension
// On gcc2.95 on Alpha OSF1, the native assembler does not like empty
// files, so provide some dummy code
namespace { void dummy () {}; };
#endif // #if deal_II_dimension == 3
