#  --------------------------------- For 2d ---------------------------------
#  -- Use the following maple script to generate the restriction matrices
#  -- for DG.
#  -- Make sure that the files do not exists beforehand, since output
#  -- is appended instead of overwriting previous contents.
#  --
#  -- You should only have to change the very first lines for polynomials
#  -- of higher order.
#  --------------------------------------------------------------------------
#
# $Id$
# Author: Ralf Hartmann, 2000

# for DG(3)

  n_functions      := 16:
	
  trial_function := (a1 + a2*xi + a3*xi*xi + a4*xi*xi*xi) +
                     (b1 + b2*xi + b3*xi*xi + b4*xi*xi*xi)*eta +
		     (c1 + c2*xi + c3*xi*xi + c4*xi*xi*xi)*eta*eta +
		     (d1 + d2*xi + d3*xi*xi + d4*xi*xi*xi)*eta*eta*eta:
  # note: support_points[i] is a vector which is indexed from
  # one and not from zero!
  #   phi(i,support_points[j])=delta_ij
  support_points := array(0..n_functions-1):
  support_points[0] := [0,0]:
  support_points[1] := [1,0]:
  support_points[2] := [1,1]:
  support_points[3] := [0,1]:
  support_points[4] := [1/3,0]:
  support_points[5] := [2/3,0]:
  support_points[6] := [1,1/3]:
  support_points[7] := [1,2/3]:
  support_points[8] := [1/3,1]:
  support_points[9] := [2/3,1]:
  support_points[10]:= [0,1/3]:
  support_points[11]:= [0,2/3]:
  support_points[12]:= [1/3,1/3]:
  support_points[13]:= [2/3,1/3]:
  support_points[14]:= [2/3,2/3]:
  support_points[15]:= [1/3,2/3]:

  read restriction_dg;

  print (`writing data to files`):
  readlib(C):
  C(restriction, filename=restriction_dg3_txt);











