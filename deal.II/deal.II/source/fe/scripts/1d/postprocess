#  Use the following perl scripts to convert the output into a
#  suitable format:
#
#  $Id$
#  Wolfgang Bangerth, 1998

#    concatenate lines belonging together
perl -pi -e 's/([^;])\n/$1/g;' shape_value_1d
perl -pi -e 's/([^;])\n/$1/g;' shape_grad_1d

#    give the programs a structure
perl -pi -e 's/phi_polynom\[(\d)\] =/case $1: return/g;' *1d_shape_value
perl -pi -e 's/grad_phi_polynom\[(\d)\] = (.*);/case $1: return Point<1>($2);/g;' *1d_shape_grad

#    use other indexing format for matrices
perl -pi -e 's/\[(\d+)\]\[(\d)\]/($1,$2)/g;' *1d_massmatrix
perl -pi -e 's/\[(\d+)\]\[(\d)\]\[(\d)\]/[$1]($2,$3)/g;' *1d_prolongation
perl -pi -e 's/\[(\d+)\]\[(\d)\]\[(\d)\]/[$1]($2,$3)/g;' *1d_restriction

#    give temporaries a data type
perl -pi -e 's/(t\d+) =/const double $1 =/g;' *1d_massmatrix

#    omit lines assigning zeroes to matrix elements, since zero is
#    already set and to save compilation time
perl -pi -e 's/.*= 0.0;\n//g;' restriction_1d
perl -pi -e 's/.*= 0.0;\n//g;' prolongation_1d