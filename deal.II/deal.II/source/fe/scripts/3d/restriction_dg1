#  --------------------------------- For 3d ---------------------------------
#  -- Use the following maple script to generate the restriction matrices
#  -- for DG.
#  -- Make sure that the files do not exists beforehand, since output
#  -- is appended instead of overwriting previous contents.
#  --
#  -- You should only have to change the very first lines for polynomials
#  -- of higher order.
#  --------------------------------------------------------------------------
#
# $Id$
# Author: Ralf Hartmann, 2000

# for DG(1)

  n_functions      := 8:

  trial_function := ((a1 + a2*xi) +
                     (b1 + b2*xi)*eta) +
                    ((d1 + d2*xi) + 
                     (e1 + e2*xi)*eta)*zeta:
  # note: support_points[i] is a vector which is indexed from
  # one and not from zero!
  #   phi(i,support_points[j])=delta_ij
  support_points := array(0..n_functions-1):
  support_points[0] := array(1..3, [0,0,0]):
  support_points[1] := array(1..3, [1,0,0]):
  support_points[2] := array(1..3, [1,0,1]):
  support_points[3] := array(1..3, [0,0,1]):
  support_points[4] := array(1..3, [0,1,0]):
  support_points[5] := array(1..3, [1,1,0]):
  support_points[6] := array(1..3, [1,1,1]):
  support_points[7] := array(1..3, [0,1,1]):

  read restriction_dg;

  print (`writing data to files`):
  readlib(C):
  C(restriction, filename=restriction_dg1_txt);











