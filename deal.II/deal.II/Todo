Replace the declaration of vector<bool> in tria.h by something real
  when gcc2.8 is available


Rewrite code like
      int flagged_cells = 0;
      for (; cell!=endc; ++cell)
	if (cell->refine_flag_set())
	  ++flagged_cells;
  using the STL count() operation with a member function predicate if
  available.


Write monitors to control whether enough memory was allocated for
  the vectors (i.e. after a process, whether size()==capacity()).
  (for DoF)

Write Triangulation::mesh_function.

Unify CellAccessor<1> and <2> by renaming
    LineAccessor<dim> -> SubstructAccessor<dim,1>
    QuadAccessor<dim> -> SubstructAccessor<dim,2>
  and deriving CellAccessor<dim> from SubstructAccessor<dim,dim>
  Do the same with DoFLineAccessor and DoFQuadAccessor

Add support for fast assemblage of mass matrices.

Make AssemblerData a local class to Assembler again if gcc2.8 supports it.

Let ParameterHandler and DataIn/Out throw exceptions. Make more tests
  on the input.
  
Replace function objects by mem_fun, fun_ptr, ... when member function
  templates are supported.

implement ProblemBase::distribute_cell_to_dof_vector


Remove gcc2.8 workaround with DoFSubstructAccessor


Replace verbatim implementation of setw(int) in parameter-handler.cc
  when a reasonable (linkable) library implementation is available
  again.

 
Use the C++ standard string classes instead of the libg++ String
  class.





DEAL:
why do loops in dFMatrix run backwards?

Let an empty dfmatrix assume it has dimensions zero rather than one!

Is dvector::operator= (double) really useful or does it make more
  confusion than it helps?


Give mia::State a much better name, same for Control ! :-]]]


Let all the reinit functions in /lac free their memory, if reinit
  is called with less requirements. Maybe give free all memory
  if the given dimension is zero. If so, check all deal.II files
  for use of reinit.

