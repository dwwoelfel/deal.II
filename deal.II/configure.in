dnl $Id$
dnl
dnl    This is the input for the ./configure script of the deal.II
dnl    libraries. All options and paths are stored in
dnl    the file common/Make.global_options.
dnl
dnl    In doc/Makefile some information on the kind of documentation
dnl    is stored.
dnl
dnl
dnl author: Wolfgang Bangerth, Guido Kanschat 1999, 2000
dnl


define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl
AC_INIT(base)


dnl    Set the path to the deal.II libraries to `pwd`
DEAL2_DIR=`pwd`
AC_SUBST(DEAL2_DIR)


dnl    Check for machine type operating system
AC_CANONICAL_SYSTEM
dnl AC_SUBST(target_os)

dnl    Set the language for which subsequent tests shall be
dnl    performed to C++
AC_LANG_CPLUSPLUS





dnl -------------------------------------------------------------
dnl Find external programs
dnl -------------------------------------------------------------

dnl    Find a C compiler, which is used when building
dnl    shared libaries. This modifies the variable CC.
dnl    In order to get the absolute path of the compiler, use the
dnl    second line
AC_PROG_CC
AC_PATH_PROG(CC,$CC)


dnl    Find the right C++ compiler. This modifies the following
dnl    variables: CXX, GXX, CXXFLAGS
AC_PROG_CXX
AC_PATH_PROG(CXX,$CXX)
if test $GXX = yes ; then
  # find out the right version
  GXX_VERSION_STRING=`($CXX -v 2>&1) | grep "gcc version"`
  if test -n "`echo $GXX_VERSION_STRING | grep egcs-1.1`" ; then
    AC_MSG_RESULT(Compiler is egcs-1.1)
    GXX_VERSION=egcs1.1
  else
    if test -n "`echo $GXX_VERSION_STRING | grep 'gcc version 2.95'`" ; then
      AC_MSG_RESULT(Compiler is gcc-2.95)
      GXX_VERSION=gcc2.95
    else
      AC_MSG_RESULT(Compiler is unknown but accepted)
      GXX_VERSION=other
    fi
  fi
else
  AC_MSG_ERROR(No configuration options for this C++ compiler
               supported at present)
  exit 1
fi
AC_SUBST(GXX_VERSION)



dnl    Find path to perl
AC_PATH_PROG(PERL, perl)



dnl -------------------------------------------------------------
dnl Set compiler flags to their default values. They will be 
dnl modified according to other options further down below
dnl
dnl CXXFLAGSO are the flags for optimized mode
dnl CXXFLAGSG are the flags for debug mode
dnl -------------------------------------------------------------

if test $GXX = yes ; then
  CXXFLAGSO="-O2 -Wuninitialized -felide-constructors -fnonnull-objects -ftemplate-depth-32"
  CXXFLAGSG="-DDEBUG -ggdb -Wall -W -Wtraditional -Wpointer-arith -Wbad-function-cast -Wwrite-strings -Wmissing-prototypes -Wmissing-declarations -Wnested-externs -Winline -Woverloaded-virtual -Wstrict-prototypes -Wsynth -Wsign-compare -Wconversion -ftemplate-depth-32"

  dnl set some flags that are specific to some versions of the
  dnl compiler:
  dnl - egcs1.1 yielded incorrect code with some loop unrolling
  dnl - after egcs1.1, the optimization flag -fstrict-aliasing was
  dnl   introduced, which enables better optimizations for
  dnl   well-written C++ code. we believe that deal.II falls into that
  dnl   category and thus enable the flag 
  dnl - egcs1.1 yielded incorrect code with vtable-thunks. thus disable
  dnl   them for egcs1.1. however, if on Linux, disabling them
  dnl   prevents programs from being linked, so take the risk of broken
  dnl   thunks on this platform

  case "$GXXVERSION" in
    egcs1.1)
        case "$target" in
	  *linux*)
	      ;;

	  *)
	      CXXFLAGSG = "$CXXFLAGSG -fno-vtable-thunks"
	      CXXFLAGSO = "$CXXFLAGSO -fno-vtable-thunks"
	      ;;
	esac
	;;

    dnl All other gcc versions
    *)
	CXXFLAGSO="$CXXFLAGSO -funroll-loops -funroll-all-loops -fstrict-aliasing"
	;;
  esac
else
  dnl Other compiler
  AC_MSG_ERROR(No compiler options for this C++ compiler
               specified at present)
  exit 1
fi

AC_SUBST(CXXFLAGSG)
AC_SUBST(CXXFLAGSO)




dnl -------------------------------------------------------------
dnl Multithreading
dnl -------------------------------------------------------------

dnl    Test whether multithreading support is requested. This
dnl    does not tell deal.II to actually use it, but the
dnl    compiler flags are set to allow for it,
AC_ARG_ENABLE(multithreading,
[  --enable-multithreading Set compiler flags to allow for multithreaded programs],
    enablemultithreading=$enableval,
    enablemultithreading=no)
AC_SUBST(enablemultithreading)


dnl Adjust compiler parameters if multithreading is desired:
dnl - Use the right -threads/-pthread/-mthread option
dnl - Set preprocessor directives if necessary
dnl - __USE_MALLOC tells gcc to use thread safe STL allocators
if test $enablemultithreading = yes ; then
  DEAL_II_GET_THREAD_FLAGS
  DEAL_II_THREAD_CPPFLAGS

  CXXFLAGSG="$CXXFLAGSG -D__USE_MALLOC"
  CXXFLAGSO="$CXXFLAGSO -D__USE_MALLOC"
fi



dnl    Test whether the user wants the multithread code in the 
dnl    library to be used
AC_ARG_WITH(multithreading,
[  --with-multithreading=DIR use DIR as path to the ACE library],
    withmultithreading=$withval,
    withmultithreading=no)
if test $withmultithreading != no ; then
  AC_MSG_CHECKING(for ACE)
  if test -d $withmultithreading ; then
    AC_MSG_RESULT(found)
  else
    AC_MSG_RESULT(not found)
    AC_MSG_ERROR(Invalid ACE path)
  fi

  CXXFLAGSG="$CXXFLAGSG -DDEAL_II_USE_MT"
  CXXFLAGSO="$CXXFLAGSO -DDEAL_II_USE_MT"
fi
AC_SUBST(withmultithreading)



dnl -------------------------------------------------------------
dnl Test whether shared libraries support is requested.
dnl Default is yes, but value will be adjusted to operating system
dnl below.
dnl -------------------------------------------------------------
AC_ARG_ENABLE(shared,
[  --enable-shared Set compiler flags to generate shared libraries],
    enableshared=$enableval,
    enableshared=yes)

dnl On AIX and alpha, shared libs don't work for us at present, so 
dnl disable them (we should probably use libtool there)
case "$target" in
   *-aix* | alpha*-linux* ) 
	   AC_MSG_WARN(Shared libraries not supported on $target. Using static libs instead)
	   enableshared=no 
	   ;;
esac


dnl Set compile flags accordingly
if test $enableshared = yes ; then
  AC_MSG_RESULT(Configuring for shared libraries)
  CXXFLAGSG="$CXXFLAGSG -fPIC"
  CXXFLAGSO="$CXXFLAGSO -fPIC"

  lib_suffix=.so;
else
  AC_MSG_RESULT(Configuring for static libraries)

  lib_suffix=.a;
fi


AC_SUBST(enableshared)
AC_SUBST(lib_suffix)




dnl -------------------------------------------------------------
dnl Multigrid
dnl -------------------------------------------------------------

dnl    Test if multigrid should be enabled
dnl    default is no
dnl
dnl    ??Is this still the present state??
dnl
AC_ARG_ENABLE(multigrid,
[  --enable-multigrid Include multigrid code in library],
    enablemultigrid=$enableval,
    if test -r deal.II/source/multigrid ; then
      enablemultigrid=yes ;
    else
      enablemultigrid=no ;
    fi)
if test $enablemultigrid = yes ; then
   AC_MSG_RESULT(Configuring multigrid)
   AC_DEFINE(ENABLE_MULTIGRID)
fi
AC_SUBST(enablemultigrid)



dnl -------------------------------------------------------------
dnl Documentation tools
dnl -------------------------------------------------------------


dnl    Find the kdoc directory for documentation. The old one is in
dnl    doc/auto/scripts, but you might want a newer version.
AC_ARG_WITH(kdoc,
[  --with-kdoc=DIR use kdoc installed in DIR],
    kdocdir=$withval,
    kdocdir=${DEAL2_DIR}/doc/auto/scripts/kdoc)
AC_MSG_CHECKING(for kdoc)
if test -r $kdocdir/kdoc ; then
  AC_MSG_RESULT(found)
else
  AC_MSG_RESULT(not found)
  AC_MSG_ERROR(Invalid kdoc path)
fi
if test -r $kdocdir/Version ; then
  kdocversion=`cat $kdocdir/Version` ;
else
  kdocversion=1;
fi
AC_SUBST(kdocdir)
AC_SUBST(kdocversion)



dnl    Find the doc++ program
AC_ARG_WITH(docxx,
[  --with-docxx=PATH use the doc++ executable pointed to by PATH],
    docxx=$withval,
    docxx=to-be-determined)
if test "$docxx" = to-be-determined ; then
  AC_PATH_PROG(docxx,"doc++")
else
  AC_MSG_CHECKING(for doc++)
  if test -x "$docxx" ; then
    AC_MSG_RESULT(yes)
  else
    AC_MSG_RESULT(no)
    docxx=
  fi
fi
AC_SUBST(docxx)




dnl -------------------------------------------------------------
dnl Check for specific machine types
dnl -------------------------------------------------------------

case "$target" in
   dnl On Alpha, there was an internal compiler error in exceptions.h.
   dnl Disable "throw" for this platform
   alpha*-linux*)
	CXXFLAGSG="$CXXFLAGSG  -DNO_THROW"
	CXXFLAGSO="$CXXFLAGSO  -DNO_THROW"
	;;
esac







dnl -------------------------------------------------------------
dnl Last check: test whether CXXFLAGS are ok
dnl -------------------------------------------------------------
AC_MSG_CHECKING(for consistency of CXXFLAGSG flags)
CXXFLAGS="$CXXFLAGSG"
AC_TRY_COMPILE(
  [],
  [;],
  [
    AC_MSG_RESULT(yes)
  ],
  [
    AC_MSG_ERROR(invalid combination of flags!)
    exit 1;
  ])

AC_MSG_CHECKING(for consistency of CXXFLAGSO flags)
CXXFLAGS="$CXXFLAGSO"
AC_TRY_COMPILE(
  [],
  [;],
  [
    AC_MSG_RESULT(yes)
  ],
  [
    AC_MSG_ERROR(invalid combination of flags!)
    exit 1;
  ])







dnl -------------------------------------------------------------
dnl Configure other packages
dnl -------------------------------------------------------------

dnl    Configure the `tests' directory, if that is installed.
AC_CONFIG_SUBDIRS(tests)





dnl -------------------------------------------------------------
dnl Output results
dnl -------------------------------------------------------------

dnl    Write output to the global options file
AC_OUTPUT(common/Make.global_options doc/Makefile doc/auto/Makefile doc/auto/kdoc/Makefile)
