/* base/include/base/config.h.in.  Generated from configure.in by autoheader.  */


//----------------------------  config.h  ---------------------------
//    $Id$
//    Version: $Name$
//
//    Copyright (C) 2001, 2002, 2003 by the deal.II authors
//
//    This file is subject to QPL and may not be  distributed
//    without copyright and license information. Please refer
//    to the file deal.II/doc/license.html for the  text  and
//    further information on this license.
//
//----------------------------  config.h  ---------------------------
#ifndef __deal2__config_h
#define __deal2__config_h

// Note: you should not usually have to change this file, as it is
// automatically generated from the ./configure file in the top level
// directory. If there are problems with the contents of this file,
// rather than changing it, try to modify the mechanisms in
// configure.in that generated this output. The reason is that you
// would have to make these changes each time you compile a new
// version of the library, or on a different computer. Furthermore, it
// is important not to build different parts of the library with
// different versions of this file.
//
// In case of problems in autodetection of features of your build
// environment, contact the authors of the library.



/* Defined if the compiler needs to see the static keyword even for functions
   in anonymous namespaces, to avoid duplicate symbol errors when linking. For
   the details, look at aclocal.m4 in the top-level directory. */
#undef DEAL_II_ANON_NAMESPACE_BUG

/* Another test if the compiler needs to see the static keyword even for
   functions in anonymous namespaces, to avoid duplicate symbol errors when
   linking. For the details, look at aclocal.m4 in the top-level directory. */
#undef DEAL_II_ANON_NAMESPACE_LINKAGE_BUG

/* Defined if the compiler has a problem with assigning arrays in conditionals
   */
#undef DEAL_II_ARRAY_CONDITIONAL_DECAY_BUG

/* Backward compatibility support for functions and classes that do not take
   an explicit mapping variable, but rather use a default Q1 mapping instead
   */
#undef DEAL_II_COMPAT_MAPPING

/* Defined if the compiler needs a workaround for certain problems with taking
   the address of template template functions. For the details, look at
   aclocal.m4 in the top-level directory. */
#undef DEAL_II_FUNPTR_TEMPLATE_TEMPLATE_BUG

/* Flag indicating whether the library shall be compiled to use the Tecplot
   interface */
#undef DEAL_II_HAVE_TECPLOT

/* Defined if the compiler refuses to compile the definition of a function
   that was previously declared abstract. */
#undef DEAL_II_IMPLEMENTED_PURE_FUNCTION_BUG

/* Define if we have to work around a bug in Sun's Forte compiler. See the
   aclocal.m4 file in the top-level directory for a description of this bug.
   */
#undef DEAL_II_LOCAL_TYPEDEF_COMP_WORKAROUND

/* Defined if the compiler gets an internal compiler upon some code involving
   long doubles, and with optimization. For the details, look at aclocal.m4 in
   the top-level directory. */
#undef DEAL_II_LONG_DOUBLE_LOOP_BUG

/* Major version number of deal.II */
#undef DEAL_II_MAJOR

/* Define if we have to work around a bug in gcc with explicitly instantiating
   template member operators. See the aclocal.m4 file in the top-level
   directory for a description of this bug. */
#undef DEAL_II_MEMBER_OP_TEMPLATE_INST

/* Defined if the compiler refuses to allow the explicit specialization of
   static member variables. For the exact failure mode, look at aclocal.m4 in
   the top-level directory. */
#undef DEAL_II_MEMBER_VAR_SPECIALIZATION_BUG

/* Minor version number of deal.II */
#undef DEAL_II_MINOR

/* Set to the minimal number of elements a std::vector<bool> can always hold,
   i.e. its minimal capacity. */
#undef DEAL_II_MIN_BOOL_VECTOR_CAPACITY

/* Set to the minimal number of elements a std::vector<T> can always hold,
   i.e. its minimal capacity. */
#undef DEAL_II_MIN_VECTOR_CAPACITY

/* Define if we have to work around a bug in gcc with marking all instances of
   a template class as friends to this class if the class is inside a
   namespace. See the aclocal.m4 file in the top-level directory for a
   description of this bug. */
#undef DEAL_II_NAMESP_TEMPL_FRIEND_BUG

/* Define if we have to work around another bug in gcc with marking all
   instances of a template class as friends to this class if the class is
   inside a namespace. See the aclocal.m4 file in the top-level directory for
   a description of this bug. */
#undef DEAL_II_NAMESP_TEMPL_FRIEND_BUG2

/* Defined if the compiler does not properly implement the resolution of
   defect report #45 to the C++ standard, which makes nested types implicit
   friends of the enclosing class. */
#undef DEAL_II_NESTED_CLASS_FRIEND_BUG

/* Defined if the compiler does not understand friend declarations for nested
   member classes when giving a full class specification. */
#undef DEAL_II_NESTED_CLASS_TEMPL_FRIEND_BUG

/* Path to the deal.II directory */
#undef DEAL_II_PATH

/* Defined if the compiler does not support the
   substitution-failure-is-not-an-error paradigm. For the details, look at
   aclocal.m4 in the top-level directory. */
#undef DEAL_II_SFINAE_BUG

/* Define if we have to work around a bug in Sun's Forte compiler. See the
   aclocal.m4 file in the top-level directory for a description of this bug.
   */
#undef DEAL_II_TEMPLATE_SPEC_ACCESS_WORKAROUND

/* Defined if the compiler refuses to allow a typedef to a template template
   class template parameter. For the exact failure mode, look at aclocal.m4 in
   the top-level directory. */
#undef DEAL_II_TEMPLATE_TEMPLATE_TYPEDEF_BUG

/* Define if we have to work around a bug with some compilers that will not
   allow us to specify a fully specialized class of a template as a friend.
   See the aclocal.m4 file in the top-level directory for a description of
   this bug. */
#undef DEAL_II_TEMPL_SPEC_FRIEND_BUG

/* Define if the compiler provides a <errno.g> header file which does not
   define all error codes such as EINTR. In that case, use the system include
   file at /usr/include instead. There is probably a better way to do this,
   but it is not apparent by looking at the C/C++ compatibility header
   provided by the compiler. */
#undef DEAL_II_USE_DIRECT_ERRNO_H

/* Flag indicating whether the library shall be compiled for multithreaded
   applications. If so, then it is set to one, otherwise to zero. */
#undef DEAL_II_USE_MT

/* Defined if multi-threading is to be achieved by using the POSIX functions
   */
#undef DEAL_II_USE_MT_POSIX

/* Defined if POSIX is supported but not the newer POSIX barrier functions.
   Barriers will then not work in the library, but the other threading
   functionality is available. */
#undef DEAL_II_USE_MT_POSIX_NO_BARRIERS

/* Enable the multigrid components of the library */
#undef ENABLE_MULTIGRID

/* Define if the compiler provides __builtin_expect */
#undef HAVE_BUILTIN_EXPECT

/* Define to 1 if you have the `gethostname' function. */
#undef HAVE_GETHOSTNAME

/* Availability of the MA27 algorithm from HSL */
#undef HAVE_HSL_MA27

/* Availability of the MA47 algorithm from HSL */
#undef HAVE_HSL_MA47

/* Define if you have the rand_r function */
#undef HAVE_RAND_R

/* Define if the compiler provides an <iosfwd> header file */
#undef HAVE_STD_IOSFWD_HEADER

/* Define if the compiler's library in use provides a std::iterator class
   (early gcc versions did not) */
#undef HAVE_STD_ITERATOR_CLASS

/* Define if the compiler's library in use provides std::numeric_limits
   classes in the appropriate header file */
#undef HAVE_STD_NUMERIC_LIMITS

/* Define if the compiler provides an <ostream> header file */
#undef HAVE_STD_OSTREAM_HEADER

/* Define if the compiler's library in use provides std::i/ostringstream
   classes (early gcc versions did not) */
#undef HAVE_STD_STRINGSTREAM

/* Define if the compiler provides __verbose_terminate_handler */
#undef HAVE_VERBOSE_TERMINATE

/* On SunOS 4.x, the getrusage() function exists, but is not declared in the
   respective header file <resource.h>, as one would think when reading the
   man pages. Then we have to declare this function ourselves in those files
   that use this function. The question whether we have to do so is controlled
   by the preprocessor variable. */
#undef NO_HAVE_GETRUSAGE

/* Define to the address where bug reports for this package should be sent. */
#undef PACKAGE_BUGREPORT

/* Define to the full name of this package. */
#undef PACKAGE_NAME

/* Define to the full name and version of this package. */
#undef PACKAGE_STRING

/* Define to the one symbol short name of this package. */
#undef PACKAGE_TARNAME

/* Define to the version of this package. */
#undef PACKAGE_VERSION

/* If already available, do not define at all. Otherwise, define to __func__
   if that is available. In all other cases, indicate that no information
   about the present function is available for this compiler. */
#undef __PRETTY_FUNCTION__


/**
 * Have a namespace into which we declare some numeric constants, such
 * as pi. Unfortunately, these are not always available, on all systems
 * or depending on compiler flags, so we duplicate their declarations
 * here to make them unconditionally available to all other parts of the
 * library.
 *
 * The constants defined here are a subset of the @p{M_XXX} constants sometimes
 * declared in the system include file @p{math.h}, but without the 
 * prefix @p{M_}.
 *
 * In addition to that, we declare @p{invalid_unsigned_int} to be the
 * largest unsigned integer representable; this value is widely used in
 * the library as a marker for an invalid index, an invalid size of an
 * array, and similar purposes.
 */
namespace deal_II_numbers {
                                             /**
                                              * Representation of the
                                              * largest number that
                                              * can be put into an
                                              * unsigned integer. This
                                              * value is widely used
                                              * throughout the library
                                              * as a marker for an
                                              * invalid unsigned
                                              * integer value, such as
                                              * an invalid array
                                              * index, an invalid
                                              * array size, and the
                                              * like.
                                              */
  static const unsigned int 
    invalid_unsigned_int = static_cast<unsigned int> (-1);

                                             /**
                                              * e
                                              */
  static const double  E       = 2.7182818284590452354;

                                             /**
                                              * log_2 e
                                              */
  static const double  LOG2E   = 1.4426950408889634074;

                                             /**
                                              * log_10 e
                                              */
  static const double  LOG10E  = 0.43429448190325182765;

                                             /**
                                              * log_e 2
                                              */
  static const double  LN2     = 0.69314718055994530942;

                                             /**
                                              * log_e 10
                                              */
  static const double  LN10    = 2.30258509299404568402;

                                             /**
                                              * pi
                                              */
  static const double  PI      = 3.14159265358979323846;

                                             /**
                                              * pi/2
                                              */
  static const double  PI_2    = 1.57079632679489661923;

                                             /**
                                              * pi/4
                                              */
  static const double  PI_4    = 0.78539816339744830962;

                                             /**
                                              * sqrt(2)
                                              */
  static const double  SQRT2   = 1.41421356237309504880;

                                             /**
                                              * 1/sqrt(2)
                                              */
  static const double  SQRT1_2 = 0.70710678118654752440;
}
#endif

