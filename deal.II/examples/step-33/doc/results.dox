<a name="Results"></a>
<h1>Results</h1>

We run the problem with the mesh <code>slide.inp</code> (this file is in the
same directory as the source code for this program) and the following input
deck (available as <code>input.prm</code> in the same directory): 
@verbatim
# Listing of Parameters
# ---------------------

# The input grid 
set mesh = slide.inp

# Stabilization parameter
set diffusion power = 2.0

# --------------------------------------------------
# Boundary conditions
# We may specify boundary conditions for up to MAX_BD boundaries.
# Your .inp file should have these boundaries designated.
subsection boundary_1
  set no penetration = true # reflective boundary condition
end

subsection boundary_2
  # outflow boundary
  # set w_2 = pressure
  # set w_2 value = 1.5 - y
end

subsection boundary_3
  set no penetration = true # reflective
  # set w_3 = pressure
  # set w_3 value = 1.0
end

subsection boundary_4
  set no penetration = true #reflective
end

# --------------------------------------------------
# Initial Conditions
# We set the initial conditions of the conservative variables.  These lines
# are passed to the expression parsing function.  You should use x,y,z for
# the coordinate variables.

subsection initial condition
  set w_0 value = 0
  set w_1 value = 0
  set w_2 value = 10*(x<-0.7)*(y> 0.3)*(y< 0.45) + (1-(x<-0.7)*(y> 0.3)*(y< 0.45))*1.0
  set w_3 value = (1.5-(1.0*1.0*y))/0.4
end

# --------------------------------------------------
# Time stepping control
subsection time stepping
  set final time = 10.0 # simulation end time
  set time step  = 0.02 # simulation time step
  set theta scheme value = 0.5
end

subsection linear solver
  set output         = quiet
  set method         = gmres
  set ilut fill      = 1.5
  set ilut drop tolerance = 1e-6
  set ilut absolute tolerance = 1e-6
  set ilut relative tolerance = 1.0
end

# --------------------------------------------------
# Output frequency and kind
subsection output
  set schlieren plot = true
  set step = 0.01
end

# --------------------------------------------------
# Refinement control
subsection refinement
  set refinement = true
  set shock value = 1.5
  set shock levels = 1 # how many levels of refinement to allow
end

# --------------------------------------------------
# Flux parameters
subsection flux
 set stab = mesh
 #set stab value = 1.0
end
@endverbatim

When we run the program, we get the following kind of output:
@code
...
T=0.08
   Number of active cells:       1792
   Number of degrees of freedom: 7656

   NonLin Res     Lin Iter       Lin Res
   _____________________________________
   2.424e-02        0008        1.56e-13
   7.498e-05        0008        1.10e-15
   8.871e-09        0008        8.58e-20
   5.998e-16        (converged)

T=0.1
   Number of active cells:       1798
   Number of degrees of freedom: 7672

   NonLin Res     Lin Iter       Lin Res
   _____________________________________
   2.563e-02        0008        1.95e-13
   9.165e-05        0008        1.10e-15
   1.234e-08        0008        8.08e-20
   9.282e-16        (converged)

T=0.12
   Number of active cells:       1801
   Number of degrees of freedom: 7676

   NonLin Res     Lin Iter       Lin Res
   _____________________________________
   2.732e-02        0008        1.72e-13
   1.147e-04        0008        1.15e-15
   1.952e-08        0008        1.49e-19
   1.432e-15        (converged)
...
@endcode

This output reports the progress of the Newton iterations and the time
stepping. Note that our implementation of the Newton iteration indeed shows
the expected quadratic convergence order: the norm of the nonlinear residual
in each step is roughly the norm of the previous step squared. This leads to
the very rapid convergence we can see here.

The result of running these computations is a bunch of output files that we
can pass to our visualization program of choice. When we collate them into a
movie, the results looks like this:

@image html step-33.slide.gif

As we see, the heavy mass of fluid is drawn down the slope by gravity, where
it collides with the ski lodge and is flung into the air!  Hopefully everyone
escapes!

We can also visualize the evolution of the adaptively refined grid:

@image html step-33.slide_adapt.gif

The adaptivity follows and preceeds the flow pattern, based on the heuristic
refinement scheme discussed above.

