<h1>Results</h1>


When the program is run, it outputs information about the respective steps and
convergence tables with errors in the various components in the end. In 2D,
the convergence tables look the following:

@code
Q1 elements, adaptive refinement:
cells dofs   val L2    grad L2  val L2-post 
    4    24 6.101e+00 1.065e+01   5.098e+00 
   10    58 3.168e+00 9.223e+00   2.431e+00 
   28   148 2.888e+00 9.368e+00   2.644e+00 
   55   272 6.756e-01 4.088e+00   2.400e-01 
  109   578 2.175e-01 1.529e+00   7.350e-02 
  214  1072 9.783e-02 9.006e-01   2.219e-02 
  409  2056 4.812e-02 5.193e-01   1.081e-02 
  811  3880 2.714e-02 2.971e-01   4.669e-03 
 1555  7204 1.365e-02 1.789e-01   2.627e-03 
 2956 13198 7.919e-03 1.009e-01   1.006e-03 

Q1 elements, global refinement:
cells dofs      val L2        grad L2      val L2-post   
   16    80 4.570e+00    - 1.221e+01    - 4.333e+00    -
   36   168 1.869e+00 2.20 7.299e+00 1.27 1.734e+00 2.26
   64   288 7.177e-01 3.33 4.218e+00 1.91 2.538e-01 6.68
  144   624 2.729e-01 2.38 1.867e+00 2.01 6.110e-02 3.51
  256  1088 1.493e-01 2.10 1.046e+00 2.01 2.878e-02 2.62
  576  2400 6.964e-02 1.88 4.847e-01 1.90 9.202e-03 2.81
 1024  4224 4.018e-02 1.91 2.785e-01 1.93 4.027e-03 2.87
 2304  9408 1.831e-02 1.94 1.264e-01 1.95 1.236e-03 2.91
 4096 16640 1.043e-02 1.96 7.185e-02 1.96 5.306e-04 2.94
 9216 37248 4.690e-03 1.97 3.228e-02 1.97 1.600e-04 2.96

Q3 elements, global refinement:
cells dofs      val L2        grad L2      val L2-post   
   16   160 2.398e-01    - 1.873e+00    - 1.354e-01    -
   36   336 5.843e-02 3.48 5.075e-01 3.22 1.882e-02 4.87
   64   576 3.466e-02 1.82 2.534e-01 2.41 4.326e-03 5.11
  144  1248 8.297e-03 3.53 5.925e-02 3.58 6.330e-04 4.74
  256  2176 2.254e-03 4.53 1.636e-02 4.47 1.403e-04 5.24
  576  4800 4.558e-04 3.94 3.278e-03 3.96 1.844e-05 5.01
 1024  8448 1.471e-04 3.93 1.052e-03 3.95 4.378e-06 5.00
 2304 18816 2.956e-05 3.96 2.104e-04 3.97 5.751e-07 5.01
 4096 33280 9.428e-06 3.97 6.697e-05 3.98 1.362e-07 5.01
 9216 74496 1.876e-06 3.98 1.330e-05 3.99 1.817e-08 4.97
@endcode


One can see the error reduction upon grid refinement, and for the cases where
global refinement was performed, also the convergence rates can be seen. The
quadratic convergence rates of Q1 elements in the $L_2$ norm for both the
scalar variable and the gradient variable can clearly be seen, as is the cubic
rate for the postprocessed scalar variable in the $L_2$ norm. Likewise, the
scalar variable and gradient for Q3 elements converge at fourth order and the
postprocessed scalar variable at fifth order.

The same convergence rates are observed in 3d.
@code
Q1 elements, adaptive refinement:

Q1 elements, global refinement:
cells   dofs       val L2          grad L2       val L2-post   
     8     144 3.846e+00     - 1.519e+01     - 2.388e+00     - 
    27     432 4.677e+00 -0.48 2.158e+01 -0.87 3.441e+00 -0.90 
    64     960 2.366e+00  2.37 1.228e+01  1.96 1.831e+00  2.19 
   216    3024 1.225e+00  1.62 8.396e+00  0.94 1.017e+00  1.45 
   512    6912 6.870e-01  2.01 5.314e+00  1.59 2.421e-01  4.99 
  1728   22464 2.912e-01  2.12 2.494e+00  1.87 8.593e-02  2.56 
  4096   52224 1.683e-01  1.91 1.455e+00  1.87 4.056e-02  2.61 
 13824  172800 7.970e-02  1.84 6.866e-01  1.85 1.335e-02  2.74 
 32768  405504 4.637e-02  1.88 3.986e-01  1.89 5.932e-03  2.82 
110592 1354752 2.133e-02  1.92 1.831e-01  1.92 1.851e-03  2.87 

Q3 elements, global refinement:
cells   dofs       val L2        grad L2      val L2-post   
     8     576 3.845e+00    - 1.742e+01    - 3.550e+00    - 
    27    1728 8.915e-01 3.60 6.939e+00 2.27 5.865e-01 4.44 
    64    3840 2.807e-01 4.02 2.713e+00 3.26 1.326e-01 5.17 
   216   12096 7.866e-02 3.14 7.727e-01 3.10 2.112e-02 4.53 
   512   27648 3.640e-02 2.68 3.307e-01 2.95 5.224e-03 4.86 
  1728   89856 8.545e-03 3.57 7.586e-02 3.63 7.642e-04 4.74 
  4096  208896 2.598e-03 4.14 2.314e-02 4.13 1.783e-04 5.06 
 13824  691200 5.314e-04 3.91 4.699e-03 3.93 2.355e-05 4.99 
 32768 1622016 1.723e-04 3.91 1.518e-03 3.93 5.603e-06 4.99 
110592 5419008 3.482e-05 3.94 3.057e-04 3.95 7.375e-07 5.00 
@endcode


<h3>Possibilities for extensions</h3>

This tutorial program shows the a basic implementation of an HDG method
without particular focus on a high performance implementation. Let us look at
the computing time of the tutorial program and the share of the individual
components:

<table align="center" border="1">
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
    <th>Setup</th>
    <th>Assemble</th>
    <th>Solve</th>
    <th>Trace reconstruct</th>
    <th>Post-processing</th>
    <th>Output</th>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>Total time</th>
    <th colspan="6">Relative share</th>
  </tr>
  <tr>
    <td align="left">2D, Q1, cycle 9, 37,248 dofs</td>
    <td align="center">5.34s</td>
    <td align="center">0.7%</td>
    <td align="center">1.2%</td>
    <td align="center">89.5%</td>
    <td align="center">0.9%</td>
    <td align="center">2.3%</td>
    <td align="center">5.4%</td>
  </tr>
  <tr>
    <td align="left">2D, Q3, cycle 9, 74,496 dofs</td>
    <td align="center">22.2s</td>
    <td align="center">0.4%</td>
    <td align="center">4.3%</td>
    <td align="center">84.1%</td>
    <td align="center">4.1%</td>
    <td align="center">3.5%</td>
    <td align="center">3.6%</td>
  </tr>
  <tr>
    <td align="left">3D, Q1, cycle 7, 172,800 dofs</td>
    <td align="center">9.06s</td>
    <td align="center">3.1%</td>
    <td align="center">8.9%</td>
    <td align="center">42.7%</td>
    <td align="center">7.0%</td>
    <td align="center">20.6%</td>
    <td align="center">17.7%</td>
  </tr>
  <tr>
    <td align="left">3D, Q3, cycle 7, 691,200 dofs</td>
    <td align="center">516s</td>
    <td align="center">0.6%</td>
    <td align="center">34.5%</td>
    <td align="center">13.4%</td>
    <td align="center">32.8%</td>
    <td align="center">17.1%</td>
    <td align="center">1.5%</td>
  </tr>
</table>

As can be seen from the table, the solver and assembly calls dominate the
runtime of the program. This also gives a clear indication of where an
improvement makes most sense.

<ol>
  <li> Better linear solvers: We use a GMRES iterative solver without
  preconditioner, where the number of iteration increases with increasing
  problem size (the number of iterations for Q1 elements and global
  refinements start at 8 for the small sizes but increase up to 2592 for the
  largest size). To do better, one could for example use an algebraic
  multigrid preconditioner from Trilinos. For diffusion-dominated problems as
  the problem at hand with finer meshes, such a solver can be designed that
  uses the matrix-vector products from the more efficient ChunkSparseMatrix on
  the finest level, as long as we are not working in parallel with MPI.

  <li> Speed up assembly by pre-assembling parts that do not change from one
  cell to another (those that do neither contain variable coefficients nor
  mapping-dependent terms.
</ol>
