<a name="Results"></a>
<h1>Results</h1>

<h3>Output of the program and graphical visualization</h3>

<h4>2D calculations</h4>

If we run the program in two dimensions, we get the following output:
@code
examples/step-31> make run
============================ Remaking Makefile.dep
==============optimized===== step-31.cc
============================ Linking step-31
============================ Running step-31
Refinement cycle 0
   Number of active cells: 64
   Number of degrees of freedom: 679 (594+85)
   Assembling...
   Computing preconditioner...
   Solving...  11 outer CG Schur complement iterations for pressure

Refinement cycle 1
   Number of active cells: 160
   Number of degrees of freedom: 1683 (1482+201)
   Assembling...
   Computing preconditioner...
   Solving...  11 outer CG Schur complement iterations for pressure

Refinement cycle 2
   Number of active cells: 376
   Number of degrees of freedom: 3813 (3370+443)
   Assembling...
   Computing preconditioner...
   Solving...  11 outer CG Schur complement iterations for pressure

Refinement cycle 3
   Number of active cells: 880
   Number of degrees of freedom: 8723 (7722+1001)
   Assembling...
   Computing preconditioner...
   Solving...  11 outer CG Schur complement iterations for pressure

Refinement cycle 4
   Number of active cells: 2008
   Number of degrees of freedom: 19383 (17186+2197)
   Assembling...
   Computing preconditioner...
   Solving...  11 outer CG Schur complement iterations for pressure

Refinement cycle 5
   Number of active cells: 4288
   Number of degrees of freedom: 40855 (36250+4605)
   Assembling...
   Computing preconditioner...
   Solving...  11 outer CG Schur complement iterations for pressure

Refinement cycle 6
   Number of active cells: 8896
   Number of degrees of freedom: 83885 (74474+9411)
   Assembling...
   Computing preconditioner...
   Solving...  11 outer CG Schur complement iterations for pressure
@endcode
Note that the number of (outer) iterations does not increase as we refine the
mesh. 

In the images below, we show the grids for the first six steps in the program. 
Note how the grid is refined in regions where the solution rapidly changes: On
the upper boundary, we have Dirichlet boundary conditions that are -1 in the
left half of the line and 1 in the right one, so there is an aprupt change at 
x=0. Likewise, there are changes from Dirichlet to Neumann data in the two upper
corners, so the solution changes there as well.

<TABLE WIDTH="60%" ALIGN="center">
  <tr>
    <td ALIGN="center">
      @image html step-31.2d.mesh-0.png
    </td>

    <td ALIGN="center">
      @image html step-31.2d.mesh-1.png
    </td>
  </tr>

  <tr>
    <td ALIGN="center">
      @image html step-31.2d.mesh-2.png
    </td>

    <td ALIGN="center">
      @image html step-31.2d.mesh-3.png
    </td>
  </tr>

  <tr>
    <td ALIGN="center">
      @image html step-31.2d.mesh-4.png
    </td>

    <td ALIGN="center">
      @image html step-31.2d.mesh-5.png
    </td>
  </tr>
</table>

@image html step-31.2d.solution.png

<h4>3D calculations</h4>
The program now run in 3d:
@code
Refinement cycle 0
   Number of active cells: 32
   Number of degrees of freedom: 1356 (1275+81)
   Assembling...
   Computing preconditioner...
   Solving...  13 outer CG Schur complement iterations for pressure.

Refinement cycle 1
   Number of active cells: 144
   Number of degrees of freedom: 5088 (4827+261)
   Assembling...
   Computing preconditioner...
   Solving...  14 outer CG Schur complement iterations for pressure.

Refinement cycle 2
   Number of active cells: 704
   Number of degrees of freedom: 22406 (21351+1055)
   Assembling...
   Computing preconditioner...
   Solving...  14 outer CG Schur complement iterations for pressure.

Refinement cycle 3
   Number of active cells: 3168
   Number of degrees of freedom: 93176 (89043+4133)
   Assembling...
   Computing preconditioner...
   Solving...  15 outer CG Schur complement iterations for pressure.

Refinement cycle 4
   Number of active cells: 11456
   Number of degrees of freedom: 327808 (313659+14149)
   Assembling...
   Computing preconditioner...
   Solving...  15 outer CG Schur complement iterations for pressure.

Refinement cycle 5
   Number of active cells: 45056
   Number of degrees of freedom: 1254464 (1201371+53093)
   Assembling...
   Computing preconditioner...
   Solving...  14 outer CG Schur complement iterations for pressure.

Refinement cycle 6
   Number of active cells: 170720
   Number of degrees of freedom: 4625150 (4432407+192743)
   Assembling...
   Computing preconditioner...
   Solving...  15 outer CG Schur complement iterations for pressure.
@endcode

Note again that the number of iterations does not increase as we refine 
the mesh. 

Compute times for each iteration alone: seconds, seconds, 1 minute, 5
minutes, 29 minutes, 3h12, 21h39

Pictures

<TABLE WIDTH="60%" ALIGN="center">
  <tr>
    <td ALIGN="center">
      @image html step-31.3d.mesh-0.png
    </td>

    <td ALIGN="center">
      @image html step-31.3d.mesh-1.png
    </td>
  </tr>

  <tr>
    <td ALIGN="center">
      @image html step-31.3d.mesh-2.png
    </td>

    <td ALIGN="center">
      @image html step-31.3d.mesh-3.png
    </td>
  </tr>

  <tr>
    <td ALIGN="center">
      @image html step-31.3d.mesh-4.png
    </td>

    <td ALIGN="center">
      @image html step-31.3d.mesh-5.png
    </td>
  </tr>

  <tr>
    <td ALIGN="center">
      @image html step-31.3d.mesh-6.png
    </td>

    <td ALIGN="center">
    </td>
  </tr>
</table>

@image html step-31.3d.solution.png

<h3>Sparsity pattern</h3>
As mentioned when generating the sparsity pattern, it is useful to have a look
at the location of the nonzero elements. We first start off with a simple dof
renumbering by components (i.e., without using Cuthill_McKee) after the first
refinement in two dimensions. In order to generate such an output, you would
have to insert a piece of code like the following in the end of the setup step.
Note that it is not possible to directly output a BlockSparsityPattern, so we
need to generate some temporary objects that will be released again in order to
not slow down the program.
@code
  {
    SparsityPattern full_sparsity;
    CompressedSparsityPattern csp (dof_handler.n_dofs(),
                                   dof_handler.n_dofs());
    DoFTools::make_sparsity_pattern(dof_handler, csp);
    hanging_node_constraints.condense (csp);
    full_sparsity.copy_from(csp);
    std::ofstream out ("sparsity_pattern.gpl");
    full_sparsity.print_gnuplot(out);
  }
@endcode

@image html step-31.2d.sparsity-nor.png

It is clearly visible that the dofs are spread over the almost the whole matrix.
This makes the preconditioning by ILU unefficient: ILU generates a Gaussian
elimination (LU decomposition) without fill-in, which means that more fill-ins 
will result in a worse approximation to the full decomposition.

In this program, we have thus chosen a better renumbering of components. A
renumbering with Cuthill_McKee yields the following output. 

@image html step-31.2d.sparsity-ren.png

It is clearly visible that the situation is much better now. Most of the
elements are now concentrated around the diagonal for the (0,0) block in the
matrix. Similar effects are also visible for the other blocks. In this case, the
ILU decomposition will be much closer to the full LU decomposition, which
improves the quality of the preconditioner. It is also worthwile to note that
the sparse direct solver UMFPACK does some internal renumbering of the equations 
that leads to a similar pattern as the one we got from Cuthill_McKee.

Finally, we want to have a closer
look at a sparsity pattern in 3D. We now show only the (0,0) block of the
matrix, again after one adaptive refinement. Apart from the fact that the matrix
has more rows and columns, it is also visible that there are many more entries
in the matrix. Moreover, even for the optimized renumbering, there will be a
considerable amount of fill-in elements. This illustrates why UMFPACK is not a
good choice in 3D - there will be need for many new entries that eventually
won't fit into the physical memory (RAM).

@image html step-31.3d.sparsity_uu-ren.png
