<a name="Intro"></a> <h1>Introduction</h1>

This program grew out of a student project by Yan Li at Texas A&amp;M
University. Most of the work for this program is by her.

In this project, we propose a numerical simulation for two phase
flow problems in porous media. This problem includes one
elliptic equation and one nonlinear, time dependent transport
equation. This is therefore also the first time-dependent tutorial
program (besides the somewhat strange time-dependence of step-18). 


<h2>The two phase flow problem</h2>

Modeling of two phase flow in porous media is important for both
environmental remediation and the management of petroleum
reservoirs. Practical situations involving two phase flow include the
dispersal of a nonaqueous phase liquid in an aquifer, or the joint
movement of a mixture of fluids such as oil and water in a
reservoir. Simulation models, if they are to provide realistic
predictions, must accurately account for these effects.

To derive the governing equations, consider two phase flow in a
reservoir $\Omega$ under the assumption that the movement of fluids is
dominated by viscous effects; i.e. we neglect the effects of gravity,
compressibility, and capillary pressure. Porosity will be considered
to be constant. We will denote variables refering to either of the two
phases using subscripts $w$ and $o$, short for water and oil. The
derivation of the equations holds for other pairs of fluids as well,
however. 

The velocity with which molecules of each of the two phases move is
determined by Darcy's law that states that the velocity is
proportional to the pressure gradient:
@f{eqnarray*}
  \mathbf{u}_{j} 
  = 
  -\frac{k_{rj}(S)}{\mu_{j}} \mathbf{K} \cdot \nabla p 
@f}
where $\mathbf{u}_{j}$ is the velocity of phase $j=o,w$, $K$ is the
permeability tensor, $k_{rj}$ is the relative permeability of phase
$j$, $p$ is the
pressure and $\mu_{j}$ is the viscosity of phase $j$. Finally, $S$ is
the saturation (volume fraction), i.e. a function with values between
0 and 1 indicating the composition of the mixture of fluids. In
general, the coefficients $K, k_{rj}, \mu$ may be spatially dependent
variables, and we will always treat them as non-constant functions in
the following.

We combine Darcy's law with the statement of conservation of mass for
each phase,
@f[
  \textrm{div}\ \mathbf{u}_{j} = q_j,
@f]
with a source term for each phase. By summing over the two phases, 
we can express the governing equations in terms of the
so-called pressure equation:
@f{eqnarray*}
- \nabla \cdot (\mathbf{K}\lambda(S) \nabla p)= q.
@f}
Here, $q$ is th sum source term, and
@f[
  \lambda(S) = \frac{k_{rw}(S)}{\mu_{w}}+\frac{k_{ro}(S)}{\mu_{o}}
@f]
is the total mobility.

So far, this looks like an ordinary stationary, Poisson-like equation
that we can solve right away with the techniques of the first few
tutorial programs (take a look at step-6, for example, for something
very similar). However, we have not said anything yet about the
saturation, which of course is going to change as the fluids move around.

The second part of the equations is a therefore description of the
dynamics of the saturation. We model this as an advected quantity:
@f{eqnarray*}
  S_{t} + \mathbf{u} \cdot \nabla F(S) = 0.
@f}
where $\mathbf u$ is the total velocity
@f[\mathbf{u} =
  \mathbf{u}_{o} + \mathbf{u}_{w} = -\lambda(S) \mathbf{K}\cdot\nabla p.
@f]
In addition, 
@f[
  F(S) 
  = 
  \frac{k_{rw}(S)/\mu_{w}}{k_{rw}(S)/\mu_{w} + k_{ro}(S)/\mu_{o}}
@f]

In summary, what we get are the following two equations:
@f{eqnarray*}
  - \nabla \cdot (\mathbf{K}\lambda(S) \nabla p) &=& q
  \qquad \textrm{in}\ \Omega\times[0,T],
  \\
  S_{t} + \mathbf{u} \cdot \nabla F(S) &=& 0
  \qquad \textrm{in}\ \Omega\times[0,T].
@f}
Here, $p=p(\mathbf x, t), S=S(\mathbf x, t)$ are now time dependent
functions: while at every time instant the flow field is in
equilibrium with the pressure (i.e. we neglect dynamic
accellerations), the saturation is transported along with the flow and
therefore changes over time, in turn affected the flow field again
through the dependence of the first equation on $S$.

This set of equations has a peculiar character: one of the two
equations has a time derivative, the other one doesn't. This
corresponds to the character that the pressure and velocities are
coupled through an instantaneous constraint, whereas the saturation
evolves over finite time scales.

Such systems of equations are called Differential Algebraic Equations
(DAEs), since one of the equations is a differential equation, the
other is not (at least not with respect to the time variable) and is
therefore an "algebraic" equation. (The notation comes from the field
of ordinary differential equations, where everything that does not
have derivatives with respect to the time variable is necessarily an
algebraic equation.) This class of equations contains pretty
well-known cases: for example, the time dependent Stokes and
Navier-Stokes equations (where the algebraic constraint is that the
divergence of the flow field, $\textrm{div}\ \mathbf u$, must be zero)
as well as the time dependent Maxwell equations (here, the algebraic
constraint is that the divergence of the electric displacement field
equals the charge density, $\textrm{div}\ \mathbf D = \rho$ and that the
divergence of the magnetic flux density is zero: $\textrm{div}\ \mathbf
B = 0$). We will see that the different character of the two equations
will inform our discretization strategy for the two equations.


<h2>Discretization</h2>

 For simplicity, in our project we will assume no
source $q=0$ and the heterogeneous porous medium is isotropic
$\mathbf{K}(x,y) =
k(x,y) \mathbf{I}$.

Our two dimensional numerical simulation will be done on unit cell
$\Omega = [0,1]\times [0,1]$ for $t\in [0,T]$.
\f{eqnarray}
\mathbf{u}(x,y)+\mathbf{K}(x,y)\lambda(S) \nabla p= 0 && \forall(x,y)\in\Omega, \forall t\in [0,T]\\
\nabla \cdot\mathbf{u}(x,y)= 0 && \forall(x,y)\in\Omega, \forall t \in [0,T] \\
S_{t} + \mathbf{u} \cdot \nabla F(S) = 0&& \forall(x,y)\in\Omega,
\forall t \in [0,T]
\f}
 Boundary conditions are:
\f[
\begin{array}{cr}
p(x,y)=1 & \forall(x,y)\in \Gamma_{1}:=\{(x,y)\in \partial \Omega: x=0\}\\
p(x,y)=0 & \forall(x,y)\in  \Gamma_{2}:=\{(x,y)\in \partial \Omega: x=1\}\\
\mathbf{u}(x,y)\cdot \mathbf{n}=0 & \forall(x,y)\in
\partial\Omega \setminus(\Gamma_{1}\bigcup \Gamma_{2})
\end{array}
\f]

Initial conditions are:
\f[
\begin{array}{cr}
S(x,y,t=0)= 1& \forall (x,y) \in \Gamma_{1}\\
S(x,y,t=0) = 0 & \forall(x,y)\in \partial \Omega \setminus
\Gamma_{1}
\end{array}
\f]

We apply mixed finite method on velocity and pressure. To be
well-posed, we choose Raviart-Thomas spaces $RT_{k}$ for
$\mathbf{u}$ and discontinuous elements of class $DQ_{k}$ for $p$,
then the mixed
system is:

Find $(\mathbf{u},p)\in RT_{k}\times DQ_{k}$ such that:
@f{eqnarray*}
\sum_{\kappa}\{ \int _{\kappa}(K \lambda)^{-1} \mathbf{u}\cdot
\mathbf{v} dx - \int_{\kappa} p \nabla \cdot \mathbf{v} dx\}
 =- \int_{\Gamma _{1}} \mathbf{v}\cdot \mathbf{n}&&  \forall\mathbf{v}\in RT_{k}(\Omega)\\
\sum_{\kappa}\{\int (\nabla \cdot \mathbf{u}) q dx\} = 0 && \forall
q\in DQ_{k}(\Omega)
@f}
For saturation, we also use discontinuous finite element method.
i.e. Find $S^{n+1} \in DQ_{k}$ such that for all $ \phi \in DQ_{k}$,
the following formulation holds:
@f{eqnarray*}
\sum_{\kappa}\{\int_{\kappa}\frac{S^{n+1}-S^{n}}{\triangle t} \phi
dx + \int_{\kappa} (\mathbf{u}^{n+1}\cdot \nabla F(S^{n})) \phi
dx\} =0
@f}
Integrating by parts:
@f{eqnarray*}
\nonumber
 \sum_{\kappa}\{\int_{\kappa}S^{n+1} \phi dx +\triangle t
\int_{\partial \kappa}F(S^{n})( \mathbf{u}^{n+1}\cdot \mathbf{n} )
\phi dx &-\triangle t\int_{\kappa}  F(S^{n})( \mathbf{u^{n+1}}\cdot
\nabla
\phi )dx\}\\
&= \sum_{\kappa}\int_{\kappa} S^{n} \phi dx
@f}
where $\mathbf{n}$ denotes the unit outward normal to the
boundary $\partial \kappa$. And here we can use $u^{n+1}$ instead of
$u^{n}$ is because that we view $(u^{n+1},p^{n+1},S^{n+1})$ as
a block vector,$u^{n+1}$ could be implement in the coefficient function for saturation.
We believe the saturation is computed more accurately in this way.

Considering the discontinuity of the discrete function $S_h$ on
interelement faces, the flux $\mathbf{u}^{n+1}\cdot \mathbf{n} $ is
computed as:
 @f{eqnarray*}
&&\int_{\partial \kappa}F(S^{n}) (\mathbf{u}^{n+1}\cdot \mathbf{n})
\phi dx =\\
\nonumber && \int_{\partial \kappa _{+}}
F(S^{n,+})(\mathbf{u}^{n+1,+}\cdot \mathbf{n})\phi dx
+\int_{\partial \kappa _{-}} F(S^{n,-})(\mathbf{u}^{n+1,-}\cdot
\mathbf{n})\phi dx
@f}

where, $\partial \kappa _{-}:= \{x\in
\partial\kappa , \mathbf{u}(x) \cdot \mathbf{n}<0\}$ denotes the inflow boundary
and$\partial \kappa _{+}:= \{\partial \kappa \setminus \partial
\kappa_{-}\}$ is the outflow part of the boundary. By the
discontinuity of$ S_{h}$ , $F(S^{n,-})$ takes the value of
neighboring cell,$F(S^{n+})$ takes the value of cell $\kappa$.

<h2>Implementation</h2>

We use
$dealII$ to implement our mixed and DG system. The main idea is same
with step-20 but there are some new problems we have to consider:

 $(1)$ We has the three blocks vector $(u,p,S)$ , in which
all the functions are dependent on time. i.e. At each time step we
need project the $solution$ into $old-solution$, using
$old-solution$ to get a new $solution$.
Keep doing this until the last time step;

At time $t=t^{n+1}$ , suppose $old-solution=(u^{n},p^{n},S^{n})$ is
known, in $assemble-system()$ part, we assemble system matrix as:
\f[
\begin{array}{cccccccccccc}
\lceil &M(S^{n}) &B^{T}& 0 &\rceil & \lceil& \mathbf{u}^{n+1}&\rceil& &\lceil& 0 &\rceil\\
|      &B&    0 & 0 & |     &|      & p^{n+1} &|        &=&|     & q &|\\
\lfloor&\triangle t \nabla F(S^n)&    0& I & \rfloor & \lfloor
&S^{n+1} & \rfloor & & \lfloor& S^{n}& \rfloor
\end{array}
\f]

In $solve()$ part, we solve the first two equations independent of
the third equation, since $M( S^n)$ is already known. As in step-20,
using vector base functions, Schur complement with a
preconditioner and CG method, we get $u^{n+1}$and $p^{n+1}$.

Then, with the above $u^{n+1}$ and $p^{n+1}$, we could compute
$S^{n+1}$ by :
@f{eqnarray*}
\sum_{\kappa}\int_{\kappa}S^{n+1} \phi dx&&=
\sum_{\kappa}\{\int_{\kappa} S^{n} \phi dx+\Delta t\int_{\kappa}
F(S^{n}) \mathbf{u^{n+1}}\cdot \nabla \phi dx\\
\nonumber && -\Delta t \int_{\partial \kappa_{-}}F(S^{n,-})
\mathbf{u}^{n+1,-}\cdot \mathbf{n} \phi dx -\Delta t \int_{\partial
\kappa_{+}}F(S^{n}) \mathbf{u}^{n+1}\cdot \mathbf{n} \phi dx\}
@f}
Now, project solution $(u^{n+1},p^{n+1},S^{n+1})$ into
$old-solution$, do the above process for next time step.

 
$(2)$ The numerical flux term is related with neighbor cells. In our
implementation $solve( )$, we do the following on each cell:

For each face, compute the flux $\mathbf{u}\cdot F(S)$, the flux is
negative means it is an in-flow face. Then if this in-flow face is
on the boundary $\Gamma_{1}$:$F(S^{-})=F(1)$; If the in-flow
face is not on boundary, $F(S^{-})=F(S|_{neighbor})$.
Flux is positive means it is an out-flow face, we just use $ F(S)$ on
current cell.

All the other functions are commented in code, please see next part
- the commented program.

<h2>Test Case</h2>

Our two phase flow are chosen as water and oil. The total mobility
is : @f[\lambda (S) = \frac{1.0}{\mu} S^2 +(1-S)^2@f] Permeability is
:
@f[K(x,y)=\mathbf{k}(x,y)I=\frac{1.0}{2+1.99\sin(2\pi\frac{2x-y}{\epsilon})}
I@f]
 Fractional flow of water is: @f[F(S)=\frac{S^2}{S^2+\mu (1-S)^2}@f]
Choose $\epsilon=0.05$ , viscosity $\mu=0.2$.
The resulting solution will be shown in result part.
