<a name="Results"></a>
<h1>Results</h1>

When the program is run, it produces the following output:
<pre>
<code>
Number of active cells: 16384
Number of degrees of freedom: 16641

Time step 1 at t=0.015625
   u-equation: 8 CG iterations.
   v-equation: 22 CG iterations.
   Total energy: 0.982265
Time step 2 at t=0.03125
   u-equation: 8 CG iterations.
   v-equation: 23 CG iterations.
   Total energy: 4.10195
Time step 3 at t=0.046875
   u-equation: 8 CG iterations.
   v-equation: 20 CG iterations.
   Total energy: 6.95484
Time step 4 at t=0.0625
   u-equation: 8 CG iterations.
   v-equation: 21 CG iterations.
   Total energy: 7.92609
Time step 5 at t=0.078125
   u-equation: 7 CG iterations.
   v-equation: 22 CG iterations.
   Total energy: 8.9877
Time step 6 at t=0.09375
   u-equation: 8 CG iterations.
   v-equation: 21 CG iterations.
   Total energy: 10.1318

...

Time step 31 at t=0.484375
   u-equation: 7 CG iterations.
   v-equation: 21 CG iterations.
   Total energy: 21.6306
Time step 32 at t=0.5
   u-equation: 7 CG iterations.
   v-equation: 21 CG iterations.
   Total energy: 23.417
Time step 33 at t=0.515625
   u-equation: 7 CG iterations.
   v-equation: 21 CG iterations.
   Total energy: 23.2328

...

Time step 319 at t=4.98438
   u-equation: 7 CG iterations.
   v-equation: 21 CG iterations.
  Total energy: 23.2328
Time step 320 at t=5
   u-equation: 7 CG iterations.
   v-equation: 21 CG iterations.
  Total energy: 23.2328
</code>
</pre>

What we see immediately is that the energy is a constant at least after
$t=\frac 12$ (until which the boundary source term $g$ is nonzero, injecting
energy into the system).

In addition to the screen output, the program writes the solution of each time
step to an output file. If we process them adequately and paste them into a
movie, we get the following:

@image html step-23.movie.gif "Animation of the solution of step-23."

The movie shows the generated wave nice traveling through the domain and back,
being reflected at the clamped boundary. Some numerical noise is trailing the
wave, an artifact of a too-large mesh size that can be reduced by reducing the
mesh width and the time step.


<a name="extensions"></a>
<h3>Possibilities for extensions</h3>

If you want to explore a bit, try out some of the following things:
<ul>
  <li>Varying $\theta$. This gives different time stepping schemes, some of
  which are stable while others are not. Take a look at how the energy
  evolves. 

  <li>Different initial and boundary conditions, right hand sides.

  <li>More complicated domains or more refined meshes. Remember that the time
  step needs to be bounded by the mesh width, so changing the mesh should
  always involve also changing the time step.

  <li>Variable coefficients: In real media, the wave speed is often
  variable. In particular, the "real" wave equation in realistic media would
  read 
  @f[
     \rho(x) \frac{\partial^2 u}{\partial t^2}
     -
     \nabla \cdot
     a(x) \nabla u = f,
  @f]
  where $\rho(x)$ is the density of the material, and $a(x)$ related to the
  stiffness coefficient. The wave speed is then $c=\sqrt{a/\rho}$.

  To make such a change, we would have to compute the mass and Laplace
  matrices with a variable coefficient. Fortunately, this isn't too hard: the
  functions MatrixTools::create_laplace_matrix and
  MatrixTools::create_vector_tools have additional default parameters that can
  be used to pass non-constant coefficient functions to them. The required
  changes are therefore relatively small. On the other hand, care must be
  taken again to make sure the time step is within the allowed range.
</ul>
