<h1>Results</h1>


The output of the program looks as follows (the number of iterations
may vary by one or two, depending on your computer, since this is
often dependent on the round-off accuracy of floating point
operations, which differs between processors):
@code
Solving problem in 2 space dimensions.
   Number of active cells: 256
   Total number of cells: 341
   Number of degrees of freedom: 289
   26 CG iterations needed to obtain convergence.
Solving problem in 3 space dimensions.
   Number of active cells: 4096
   Total number of cells: 4681
   Number of degrees of freedom: 4913
   30 CG iterations needed to obtain convergence.
@endcode
It is obvious that in three spatial dimensions the number of cells and
therefore also the number of degrees of freedom is
much higher. What cannot be seen here, is that besides this higher
number of rows and columns in the matrix, there are also significantly
more entries per row of the matrix in three space
dimensions. Together, this leads to a much higher numerical effort for
solving the system of equation, which you can feel when you actually
run the program.



The program produces two files: <code>solution-2d.gmv</code> and
<code>solution-3d.gmv</code>, which can be viewed using the program
GMV (in case you do not have that program, you can easily change the
output format in the program to something which you can view more
easily). From the two-dimensional output, we have produced the
following two pictures:



<TABLE WIDTH="60%" ALIGN="center">
  <tr>
    <td ALIGN="center">
      @image html step-4.solution-2d.png
    </td>

    <td ALIGN="center">
      @image html step-4.grid-2d.png
    </td>
  </tr>
</table>


The left one shows the solution of the problem under consideration as
a 3D plot. As can be seen, the solution is almost flat in the interior
of the domain and has a higher curvature near the boundary. This, of
course, is due to the fact that for Laplace's equation the curvature
of the solution is equal to the right hand side and that was chosen as
a quartic polynomial which is nearly zero in the interior and is only
rising sharply when approaching the boundaries of the domain; the
maximal values of the right hand side function are at the corners of
the domain, where also the solution is moving most rapidly.
It is also nice to see that the solution follows the desired quadratic
boundary values along the boundaries of the domain.



The right picture shows the two dimensional grid, colorized by the
values of the solution function. This is not very exciting, but the
colors are nice.




In three spatial dimensions, visualization is a bit more difficult. To
the left, you can see the solution at three of the six outer faces of
the cube in which we solved the equation, and on a plane through the
origin. On some of the planes, the cut through the grid is also shown.



<TABLE WIDTH="60%" ALIGN="center">
  <tr>
    <td ALIGN="center">
      @image html step-4.solution-3d.png
    </td>

    <td ALIGN="center">
      @image html step-4.grid-3d.png
    </td>
  </tr>
</table>



The right picture shows the three dimensional grid, colorized by the
solutions values. 3D grids are difficult to visualize, which can be
seen here already, even though the grid is not even locally refined.




<a name="extensions"></a>
<h3>Possibilities for extensions</h3>


Essentially the possibilities for playing around with the program are the same
as for the previous one, except that they will now also apply to the 3d
case. For inspiration read up on <a href="step_3.html#extensions"
target="body">possible extensions in the documentation of step 3</a>.

