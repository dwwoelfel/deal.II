# Listing of Parameters
# ---------------------
set Compute error            = true
set Error file format        = tex
set Output error tables      = true

# Comma separated list of names for the components. This will be used both for
# error tables in text format and to output the solution to a file. Note that
# in the case of a vector function the error name which is used to compute the
# norm (supposing the type of the other components is 'Add') is the first
# one.
set Solution names           = u1,u2

# Comma separated version of the same thing as above for the latex version of
# the table.
set Solution names for latex = u1,u2

# Comma separated list of table names.
set Table names              = error
set Write error files        = false


subsection Dirichlet Data
  # Any constant used inside the function which is not a variable name.
  set Function constants  = 

  # Separate vector valued expressions by ';' as ',' is used internally by the
  # function parser.
  set Function expression = sin(2*pi*x)*cos(2*pi*y); cos(2*pi*x)*sin(2*pi*y)

  # The name of the variables as they will be used in the function, separated
  # by ','.
  set Variable names      = x,y,t
end


subsection Domain Parameters
  set Input mesh file            = square
  set Input mesh format          = ucd
  set Output mesh file           = square_out
  set Path of domain mesh files  = mesh/

  # If this is false, then the input mesh file below is ignored and a
  # hyper-cube is created.
  set Read domain mesh from file = false


  subsection Grid Out Parameters
    set Format = none


    subsection DX
      # Write all faces, not only boundary
      set Write all faces = true

      # Write the mesh connectivity as DX grid cells
      set Write cells     = true

      # If cells are written, additionally write their diameter as data for
      # visualization
      set Write diameter  = false

      # Write faces of cells. These may be boundary faces or all faces between
      # mesh cells, according to "Write all faces"
      set Write faces     = false

      # Write the volume of each cell as data
      set Write measure   = false
    end

    subsection Eps
      # Azimuth of the viw point, that is, the angle in the plane from the
      # x-axis.
      set Azimuth         = 30

      # Number of points on boundary edges. Increase this beyond 2 to see
      # curved boundaries.
      set Boundary points = 2

      # (2D only) Write cell numbers into the centers of cells
      set Cell number     = false

      # Draw lines with user flag set in different color
      set Color by flag   = false

      # Draw different colors according to grid level.
      set Color by level  = false

      # Elevation of the view point above the xy-plane.
      set Elevation       = 30

      # (2D only) if "Cell number" is true, writenumbers in the form
      # level.number
      set Level number    = false

      # Width of the lines drawn in points
      set Line width      = 0.5

      # Size of the output in points
      set Size            = 300

      # Depending on this parameter, either thewidth or height of the eps is
      # scaled to "Size"
      set Size by         = width

      # Write numbers for each vertex
      set Vertex number   = false
    end

    subsection Gnuplot
      set Boundary points = 2
      set Cell number     = false
    end

    subsection Msh
      set Write faces = false
      set Write lines = false
    end

    subsection Ucd
      set Write faces    = false
      set Write lines    = false
      set Write preamble = true
    end

    subsection XFig
      set Boundary        = true
      set Boundary points = 0
      set Boundary style  = 0
      set Boundary width  = 3
      set Fill style      = 20
      set Level color     = false
      set Level depth     = true
      set Line style      = 0
      set Line width      = 1
    end

  end

end


subsection Elastic Moduli
  # Any constant used inside the functions which is not a variable name.
  set Function constants = 

  # Separate different components expressions by ';' as ',' is used internally
  # by the function parser.
  set Row 1              = 0.5; 0.5; 0
  set Row 2              = 0.5; 0
  set Row 3              = 0.5

  # The name of the variables as they will be used in the function, separated
  # by ','.
  set Variable names     = x,y,t
end


subsection Exact Solution
  # Any constant used inside the function which is not a variable name.
  set Function constants  = 

  # Separate vector valued expressions by ';' as ',' is used internally by the
  # function parser.
  set Function expression = sin(2*pi*x)*cos(2*pi*y); cos(2*pi*x)*sin(2*pi*y)

  # The name of the variables as they will be used in the function, separated
  # by ','.
  set Variable names      = x,y,t
end


subsection General Parameters
  # Determines level of screen output
  set Console Depth                      = 10

  # Linear Solver Reduction Tolerance
  set Linear Solver Reducation Tolerance = 1.0E-12

  # Number of Convergence Cycles Past Initial Refinement
  set Number of Convergence Cycles       = 3
end


subsection Loading Parameters
  # End time for the simulation
  set End Time for Simulation = 1.0

  # Number of Loading Cycles to split time interval
  set Number of Loading Steps = 3
end


subsection Neumann Data
  # Any constant used inside the function which is not a variable name.
  set Function constants  = 

  # Separate vector valued expressions by ';' as ',' is used internally by the
  # function parser.
  set Function expression = 0; 0

  # The name of the variables as they will be used in the function, separated
  # by ','.
  set Variable names      = x,y,t
end


subsection Table 0
  # Evaluate convergence rates and add a column to the table for each computed
  # norm.
  set Add convergence rates          = true

  # The extra columns to add to the table.
  set Extra terms                    = cells,dofs

  # The caption that will go under the table if we write the file in tex
  # format. The default value for this object is the same name as the table
  # name.
  set Latex table caption            = error

  # Each component is separated by a semicolon, and each norm by a comma.
  # Implemented norms are Linfty, L2, W1infty, H1 and Add, which means that
  # the norm is added to the previous component. Useful for vector valued
  # functions.
  set List of error norms to compute = Linfty, L2, H1 ; Linfty, L2, H1
end


subsection Vector Space Parameters
  # Boundary indicator, followed by semicolomn and a list of components to
  # which this boundary conditions apply. More boundary indicators can be
  # separated by semicolumn. 1:0,1,4 ; 2,4:0,2
  set Dirichlet boundary map = 0,1,2,3:0,1

  # Ordering of the degrees of freedom: none, comp, cuth.
  set Dof ordering           = cuth

  # The finite element space to use. For vector finite elements use the
  # notation FESystem[FE_Q(2)^2-FE_DGP(1)] (e.g. Navier-Stokes).
  set Finite element space   = FESystem[FE_Q(1)^2]

  # Degree of the mapping. If 0 is used, then a Cartesian mapping is assumed.
  set Mapping degree         = 1

  # Boundary indicators, followed by semicolomn and a list of components to
  # which this boundary conditions apply. More boundary indicators can be
  # separated by semicolumn. 1:0,1,4 ; 2,4:0,2
  set Neumann boundary map   = 

  # Boundary indicator, followed by semicolomn and a list of components to
  # which this boundary conditions apply. More boundary indicators can be
  # separated by semicolumn. 1:0,1,4 ; 2,4:0,2
  set Other boundary map     = 3:0


  subsection Grid Parameters
    set Bottom fraction        = .3

    # If this number is greater than zero, the mesh is distorted upon
    # refinement in order to disrupt its structureness.
    set Distortion coefficient = 0
    set Global refinement      = 3

    # A number of zero means no limit.
    set Max number of cells    = 0

    # fixed_number: the Top/Bottom threshold fraction of cells are flagged for
    # refinement/coarsening. fixed_fraction: the cells whose error is
    # Top/Bottom fraction of the total are refined/coarsened. optmized: try to
    # reach optimal error distribution, assuming error is divided by 4 upon
    # refining. global: refine all cells.
    set Refinement strategy    = fixed_number
    set Top fraction           = .3
  end

end


subsection Yield Stress
  # Any constant used inside the function which is not a variable name.
  set Function constants  = 

  # Separate vector valued expressions by ';' as ',' is used internally by the
  # function parser.
  set Function expression = 0

  # The name of the variables as they will be used in the function, separated
  # by ','.
  set Variable names      = x,y,t
end


subsection f - Body Source
  # Any constant used inside the function which is not a variable name.
  set Function constants  = 

  # Separate vector valued expressions by ';' as ',' is used internally by the
  # function parser.
  set Function expression = 8*pi*pi*sin(2*pi*x)*cos(2*pi*y); 8*pi*pi*cos(2*pi*x)*sin(2*pi*y)

  # The name of the variables as they will be used in the function, separated
  # by ','.
  set Variable names      = x,y,t
end


