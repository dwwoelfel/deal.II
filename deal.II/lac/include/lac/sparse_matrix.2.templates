//----------------------------  sparse_matrix.2.templates  ---------------------------
//    $Id$
//    Version: $Name$
//
//    Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003 by the deal.II authors
//
//    This file is subject to QPL and may not be  distributed
//    without copyright and license information. Please refer
//    to the file deal.II/doc/license.html for the  text  and
//    further information on this license.
//
//----------------------------  sparse_matrix.2.templates  ---------------------------

#ifndef __deal2__sparse_matrix_2_templates
#define __deal2__sparse_matrix_2_templates


// Driver file for SparseMatrix functions with two types.

// TYPEMAT and TYPE2 are defined in sparsematrix?.cc

template SparseMatrix<TYPEMAT> &
SparseMatrix<TYPEMAT>::copy_from<TYPE2> (const SparseMatrix<TYPE2> &);

template 
void SparseMatrix<TYPEMAT>::copy_from<TYPE2> (const FullMatrix<TYPE2> &);

template void SparseMatrix<TYPEMAT>::add_scaled<TYPE2> (const TYPEMAT,
							const SparseMatrix<TYPE2> &);

template void SparseMatrix<TYPEMAT>::vmult<TYPE2> (Vector<TYPE2> &,
						   const Vector<TYPE2> &) const;
template void SparseMatrix<TYPEMAT>::Tvmult<TYPE2> (Vector<TYPE2> &,
						    const Vector<TYPE2> &) const;
template void SparseMatrix<TYPEMAT>::vmult_add<TYPE2> (Vector<TYPE2> &,
						       const Vector<TYPE2> &) const;
template void SparseMatrix<TYPEMAT>::Tvmult_add<TYPE2> (Vector<TYPE2> &,
							const Vector<TYPE2> &) const;

template TYPE2
SparseMatrix<TYPEMAT>::matrix_norm_square<TYPE2> (const Vector<TYPE2> &) const;

template TYPE2
SparseMatrix<TYPEMAT>::matrix_scalar_product<TYPE2> (const Vector<TYPE2> &,
						     const Vector<TYPE2> &) const;

template TYPE2 SparseMatrix<TYPEMAT>::residual<TYPE2> (Vector<TYPE2> &,
						       const Vector<TYPE2> &,
						       const Vector<TYPE2> &) const;

template void SparseMatrix<TYPEMAT>::precondition_SSOR<TYPE2> (Vector<TYPE2> &,
							       const Vector<TYPE2> &,
							       const TYPEMAT) const;

template void SparseMatrix<TYPEMAT>::precondition_SOR<TYPE2> (Vector<TYPE2> &,
							      const Vector<TYPE2> &,
							      const TYPEMAT) const;

template void SparseMatrix<TYPEMAT>::precondition_TSOR<TYPE2> (Vector<TYPE2> &,
							  const Vector<TYPE2> &,
							  const TYPEMAT) const;

template void SparseMatrix<TYPEMAT>::precondition_Jacobi<TYPE2> (Vector<TYPE2> &,
							    const Vector<TYPE2> &,
							    const TYPEMAT) const;

template void SparseMatrix<TYPEMAT>::SOR<TYPE2> (Vector<TYPE2> &,
						 const TYPEMAT) const;
template void SparseMatrix<TYPEMAT>::TSOR<TYPE2> (Vector<TYPE2> &,
						  const TYPEMAT) const;
template void SparseMatrix<TYPEMAT>::SSOR<TYPE2> (Vector<TYPE2> &,
						  const TYPEMAT) const;
template void SparseMatrix<TYPEMAT>::SOR_step<TYPE2> (Vector<TYPE2> &, const Vector<TYPE2> &,
						      const TYPEMAT) const;
template void SparseMatrix<TYPEMAT>::TSOR_step<TYPE2> (Vector<TYPE2> &,
						       const Vector<TYPE2> &,
						       const TYPEMAT) const;
template void SparseMatrix<TYPEMAT>::SSOR_step<TYPE2> (Vector<TYPE2> &,
						       const Vector<TYPE2> &, 
						       const TYPEMAT) const;


#endif // __deal2__sparse_matrix_2_templates
