//----------------------------  sparse_matrix.2.templates  ---------------------------
//    $Id$
//    Version: $Name$
//
//    Copyright (C) 1998, 1999, 2000, 2001, 2002 by the deal.II authors
//
//    This file is subject to QPL and may not be  distributed
//    without copyright and license information. Please refer
//    to the file deal.II/doc/license.html for the  text  and
//    further information on this license.
//
//----------------------------  sparse_matrix.2.templates  ---------------------------



// Driver file for SparseMatrix functions with two types.

// TYPEMAT and TYPE2 are defined in sparsematrix?.cc

template SparseMatrix<TYPEMAT> &
SparseMatrix<TYPEMAT>::copy_from (const SparseMatrix<TYPE2> &);

template 
void SparseMatrix<TYPEMAT>::copy_from (const FullMatrix<TYPE2> &);

template void SparseMatrix<TYPEMAT>::add_scaled (const TYPEMAT,
						 const SparseMatrix<TYPE2> &);

template void SparseMatrix<TYPEMAT>::vmult (Vector<TYPE2> &,
					    const Vector<TYPE2> &) const;
template void SparseMatrix<TYPEMAT>::Tvmult (Vector<TYPE2> &,
					     const Vector<TYPE2> &) const;
template void SparseMatrix<TYPEMAT>::vmult_add (Vector<TYPE2> &,
					    	const Vector<TYPE2> &) const;
template void SparseMatrix<TYPEMAT>::Tvmult_add (Vector<TYPE2> &,
					     	const Vector<TYPE2> &) const;

template TYPE2
SparseMatrix<TYPEMAT>::matrix_norm_square (const Vector<TYPE2> &) const;

template TYPE2
SparseMatrix<TYPEMAT>::matrix_scalar_product (const Vector<TYPE2> &,
					      const Vector<TYPE2> &) const;

template TYPE2 SparseMatrix<TYPEMAT>::residual (Vector<TYPE2> &,
					       const Vector<TYPE2> &,
					       const Vector<TYPE2> &) const;

template void SparseMatrix<TYPEMAT>::precondition_SSOR (Vector<TYPE2> &,
						      const Vector<TYPE2> &,
						      const TYPEMAT) const;

template void SparseMatrix<TYPEMAT>::precondition_SOR (Vector<TYPE2> &,
						     const Vector<TYPE2> &,
						     const TYPEMAT) const;

template void SparseMatrix<TYPEMAT>::precondition_TSOR (Vector<TYPE2> &,
						     const Vector<TYPE2> &,
						     const TYPEMAT) const;

template void SparseMatrix<TYPEMAT>::precondition_Jacobi (Vector<TYPE2> &,
							const Vector<TYPE2> &,
							const TYPEMAT) const;

template void SparseMatrix<TYPEMAT>::SOR (Vector<TYPE2> &, const TYPEMAT) const;
template void SparseMatrix<TYPEMAT>::TSOR (Vector<TYPE2> &, const TYPEMAT) const;
template void SparseMatrix<TYPEMAT>::SSOR (Vector<TYPE2> &, const TYPEMAT) const;
template void SparseMatrix<TYPEMAT>::SOR_step (Vector<TYPE2> &, const Vector<TYPE2> &, const TYPEMAT) const;
template void SparseMatrix<TYPEMAT>::TSOR_step (Vector<TYPE2> &, const Vector<TYPE2> &, const TYPEMAT) const;
template void SparseMatrix<TYPEMAT>::SSOR_step (Vector<TYPE2> &, const Vector<TYPE2> &, const TYPEMAT) const;


