//---------------------------------------------------------------------------
//    $Id$
//    Version: $Name$
//
//    Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003 by the deal.II authors
//
//    This file is subject to QPL and may not be  distributed
//    without copyright and license information. Please refer
//    to the file deal.II/doc/license.html for the  text  and
//    further information on this license.
//
//---------------------------------------------------------------------------


// File copied from sparse_matrix.2.templates and modified

// Driver file for SparseMatrixEZ functions with two types.

// TYPEMAT and TYPE2 are defined in sparsematrix?.cc

//template SparseMatrixEZ<TYPEMAT> &
//SparseMatrixEZ<TYPEMAT>::copy_from<TYPE2> (const SparseMatrixEZ<TYPE2> &);

//template 
//void SparseMatrixEZ<TYPEMAT>::copy_from<TYPE2> (const FullMatrix<TYPE2> &);

//template void SparseMatrixEZ<TYPEMAT>::add_scaled<TYPE2> (const TYPEMAT,
//							  const SparseMatrixEZ<TYPE2> &);

template void SparseMatrixEZ<TYPEMAT>::vmult<TYPE2> (Vector<TYPE2> &,
						     const Vector<TYPE2> &) const;
template void SparseMatrixEZ<TYPEMAT>::Tvmult<TYPE2> (Vector<TYPE2> &,
						      const Vector<TYPE2> &) const;
template void SparseMatrixEZ<TYPEMAT>::vmult_add<TYPE2> (Vector<TYPE2> &,
							 const Vector<TYPE2> &) const;
template void SparseMatrixEZ<TYPEMAT>::Tvmult_add<TYPE2> (Vector<TYPE2> &,
							  const Vector<TYPE2> &) const;

//template TYPE2
//SparseMatrixEZ<TYPEMAT>::matrix_norm_square<TYPE2> (const Vector<TYPE2> &) const;

//template TYPE2
//SparseMatrixEZ<TYPEMAT>::matrix_scalar_product<TYPE2> (const Vector<TYPE2> &,
//						       const Vector<TYPE2> &) const;

//template TYPE2 SparseMatrixEZ<TYPEMAT>::residual<TYPE2> (Vector<TYPE2> &,
//							 const Vector<TYPE2> &,
//							 const Vector<TYPE2> &) const;

template void SparseMatrixEZ<TYPEMAT>::precondition_SSOR<TYPE2> (Vector<TYPE2> &,
								 const Vector<TYPE2> &,
								 const TYPEMAT) const;

template void SparseMatrixEZ<TYPEMAT>::precondition_SOR<TYPE2> (Vector<TYPE2> &,
								const Vector<TYPE2> &,
								const TYPEMAT) const;

template void SparseMatrixEZ<TYPEMAT>::precondition_TSOR<TYPE2> (Vector<TYPE2> &,
								 const Vector<TYPE2> &,
								 const TYPEMAT) const;

template void SparseMatrixEZ<TYPEMAT>::precondition_Jacobi<TYPE2> (Vector<TYPE2> &,
								   const Vector<TYPE2> &,
								   const TYPEMAT) const;

