BUGS:
/* Flag indicating whether there is a bug in the compiler that leads to bogus
   warnings for inline class members in anonymous namespaces */
#cmakedefine DEAL_II_ANON_NAMESPACE_BOGUS_WARNING

/* Defined if the compiler needs to see the static keyword even for functions
   in anonymous namespaces, to avoid duplicate symbol errors when linking. For
   the details, look at aclocal.m4 in the top-level directory. */
#cmakedefine DEAL_II_ANON_NAMESPACE_BUG

/* Another test if the compiler needs to see the static keyword even for
   functions in anonymous namespaces, to avoid duplicate symbol errors when
   linking. For the details, look at aclocal.m4 in the top-level directory. */
#cmakedefine DEAL_II_ANON_NAMESPACE_LINKAGE_BUG

/* Defined if the compiler has a problem with assigning arrays in conditionals
   */
#cmakedefine DEAL_II_ARRAY_CONDITIONAL_DECAY_BUG

/* Defined if the compiler gets an internal error compiling some code that
   involves boost::bind */
#cmakedefine DEAL_II_BOOST_BIND_COMPILER_BUG

/* Defined if the compiler gets an internal error compiling some code that
   involves boost::graph */
#cmakedefine DEAL_II_BOOST_GRAPH_COMPILER_BUG

/* Define if the use of socket functionality leads to strange results with
   floating point computations on cygwin systems. */
#cmakedefine DEAL_II_BROKEN_SOCKETS

/* Defined if the compiler has a bug in deducing the type of pointers to const
   member functions. */
#cmakedefine DEAL_II_CONST_MEMBER_DEDUCTION_BUG

/* Defined if the compiler does not honor the explicit keyword on template
   constructors. */
#cmakedefine DEAL_II_EXPLICIT_CONSTRUCTOR_BUG

/* Defined if the compiler has a bug with dynamic casting and dynamic
   libraries */
#cmakedefine DEAL_II_HAVE_DARWIN_DYNACAST_BUG

/* Defined if the compiler refuses to compile the definition of a function
   that was previously declared abstract. */
#cmakedefine DEAL_II_IMPLEMENTED_PURE_FUNCTION_BUG

/* Define if we have to work around a bug in Sun's Forte compiler. See the
   aclocal.m4 file in the top-level directory for a description of this bug.
   */
#cmakedefine DEAL_II_LOCAL_TYPEDEF_COMP_WORKAROUND

/* Defined if the compiler refuses to allow the explicit specialization of
   static member arrays. For the exact failure mode, look at aclocal.m4 in the
   top-level directory. */
#cmakedefine DEAL_II_MEMBER_ARRAY_SPECIALIZATION_BUG

/* Defined if the compiler refuses to allow the explicit specialization of
   static member variables. For the exact failure mode, look at aclocal.m4 in
   the top-level directory. */
#cmakedefine DEAL_II_MEMBER_VAR_SPECIALIZATION_BUG

/* Defined if the compiler does not support the
   substitution-failure-is-not-an-error paradigm. For the details, look at
   aclocal.m4 in the top-level directory. */
#cmakedefine DEAL_II_SFINAE_BUG

/* Define if we have to work around a bug in Sun's Forte compiler. See the
   aclocal.m4 file in the top-level directory for a description of this bug.
   */
#cmakedefine DEAL_II_TEMPLATE_SPEC_ACCESS_WORKAROUND

/* Defined if the compiler requires the use of the template keyword for
   disambiguation keyword in certain contexts in which it is not supposed to
   do so. For the exact failure mode, look at aclocal.m4 in the top-level
   directory. */
#cmakedefine DEAL_II_TEMPL_OP_DISAMBIGUATION_BUG

/* Define if we have to work around a bug with some compilers that will not
   allow us to specify a fully specialized class of a template as a friend.
   See the aclocal.m4 file in the top-level directory for a description of
   this bug. */
#cmakedefine DEAL_II_TEMPL_SPEC_FRIEND_BUG

/* This error appears in the Apple edition of the gcc 3.3, which ships with
   Darwin7.9.0 and probably previous version. It leads to problems during
   linking. For the details, look at aclocal.m4 in the top-level directory. */
#cmakedefine DEAL_II_WEAK_LINKAGE_BUG
