# $Id$


###############################################################################
# This file exports several make variables to other Makefiles which
# include it. You will want to include this file into the Makefiles of
# your project to use the same compiler flags and to access the pathes
# to libraries. The following symbols defined in this file may be of
# interest:
#
#
# General
# -------
#   CXX                -- executable name of the C++ compiler
#   CC                 -- executable name of the C compiler, which
#                         is used to generate shared libraries
#   PERL               -- executable name of the 'perl' program
#
#
# Paths to libraries
# -------------------
#   lib-path-base      -- path to the library files of the /base library
#   lib-path-lac       -- same for the /lac library
#   lib-path-deal2     -- same for the /deal.II library
#   LIBPATH            -- all the library pathes prefixed by -L, i.e. the
#                         flags needed by the compiler to find the libraries
#                         when they are linked in using -lbase -llac -ldeal_II_2d
#                         (for example). These -L paths are appended to what
#                         was in $(LIBPATH) before
#
#
# Paths and filenames of libraries
# --------------------------------
#   lib-base.o         -- path and filename of the base library in optimized
#                         mode. depending on whether shared libraries were
#                         or were not enabled, the suffix of the value of this
#                         variable is either .so or .a
#   lib-base.g         -- same, for the library in debug mode
#
#   lib-lac.o          -- same for the lac libraries
#   lib-lac.g 
#
#   lib-deal2-1d.o lib-deal2-1d.g  -- same for the deal.II libraries in the various
#   lib-deal2-2d.o lib-deal2-2d.g     dimensions
#   lib-deal2-3d.o lib-deal2-3d.g
#
#
#
# Pathes to include files
# -----------------------
#   include-path-base  -- same as for lib-path-base, but contains the paths
#                         to the include files of the /base library
#   include-path-lac   -- same for the /lac library
#   include-path-deal2 -- same for the /deal.II library
#   INCLUDE            -- all the include pathes prefixed by -I
#
#
# Compiler flags
# --------------
#   CXXFLAGS.g         -- compiler flags for debug mode
#   CXXFLAGS.o         -- compiler flags for optimized mode
#
#
#
# If --with-multithreading was given to ./configure, $(INCLUDE) and
# $(LIBPATH) are augmented by the ACE include and library paths, and
# the following symbols are meaningful:
#
# ACE_ROOT           -- path to the ACE library as given to ./configure
# with-multithreading-- this symbol is 'no' if the flag was not given
#                       to ./configure and not 'no' (it actually equals
#                       $(ACE_ROOT)) if -with-multithreading=... was
#                       given
###############################################################################






######################################################
# the following lines will be replaced by the output 
# of ./configure

D                    = @DEAL2_DIR@
CC                   = @CC@
CXX                  = @CXX@
GXX-VERSION          = @GXX_VERSION@
OS                   = @OS@
PERL                 = @PERL@
enable-multithreading= @enablemultithreading@
with-multithreading  = @withmultithreading@
enable-shared        = @enableshared@


######################################################
# now configuration for compiler flags, pathes, etc

# path for libraries 

lib-path-base  = $D/base/lib
lib-path-lac   = $D/lac/lib
lib-path-deal2 = $D/deal.II/lib

LIBPATH       += $(addprefix -L,$(lib-path-base) $(lib-path-lac) $(lib-path-deal2))


# add search path for libraries for make dependencies

vpath %.a $(lib-path-base)
vpath %.a $(lib-path-lac)
vpath %.a $(lib-path-deal2)

ifeq ($(enable-shared),yes)
  lib-suffix = .so
else
  lib-suffix = .a
endif


lib-base.o     = $(lib-path-base)/libbase$(lib-suffix)
lib-base.g     = $(lib-path-base)/libbase.g$(lib-suffix)

lib-lac.o      = $(lib-path-lac)/liblac$(lib-suffix)
lib-lac.g      = $(lib-path-lac)/liblac.g$(lib-suffix)

lib-deal2-1d.o = $(lib-path-deal2)/libdeal_II_1d$(lib-suffix)
lib-deal2-2d.o = $(lib-path-deal2)/libdeal_II_2d$(lib-suffix)
lib-deal2-3d.o = $(lib-path-deal2)/libdeal_II_3d$(lib-suffix)

lib-deal2-1d.g = $(lib-path-deal2)/libdeal_II_1d.g$(lib-suffix)
lib-deal2-2d.g = $(lib-path-deal2)/libdeal_II_2d.g$(lib-suffix)
lib-deal2-3d.g = $(lib-path-deal2)/libdeal_II_3d.g$(lib-suffix)


# include paths. add library paths to existing variable

include-path-base  = $D/base/include
include-path-lac   = $D/lac/include
include-path-deal2 = $D/deal.II/include
INCLUDE           += $(addprefix -I, $(include-path-base) \
                                     $(include-path-lac)  \
                                     $(include-path-deal2))

# compiler flags for debug and optimized mode

CXXFLAGS.g   = -DDEBUG -ggdb -Wall -W -Wconversion \
               -Winline -Woverloaded-virtual\
	       -ftemplate-depth-32\
               $(INCLUDE) \
	       $(LIBPATH)
CXXFLAGS.o   = -O2 -Wuninitialized \
               -felide-constructors -fnonnull-objects \
	       -ftemplate-depth-32 \
               $(INCLUDE) \
	       $(LIBPATH)


# if not egcs-1.1 we can use additional flags for which that compiler
# had quirks
ifneq ($(GXX-VERSION),egcs1.1)
  CXXFLAGS.o += -funroll-loops -funroll-all-loops
endif


# if not on Linux and we use egcs-1.1: enable -fno-vtable-thunks,
# since vtable-thunks are broken and yield incorrect code. in fact,
# they are also broken on Linux, but we can't link programs compiled
# with -fno-vtable-thunks unless the whole compiler is recompiled,
# which we don't want to force on the users
ifneq ($(OS),Linux)
  ifeq ($(GXX-VERSION),egcs1.1)
    CXXFLAGS.g += -fno-vtable-thunks 
    CXXFLAGS.o += -fno-vtable-thunks 
  endif
endif


# if --enable-multithreading was given, then set the compiler flags
# accordingly. note that this only sets the flags to generate programs
# which use thread-safe allocation functions, include the right files,
# etc, but the library won't use its multithread code. for this you
# have to specify another flag.
ifeq ($(enable-multithreading),yes)
  CXXFLAGS.g += -threads -D__USE_MALLOC
  CXXFLAGS.o += -threads -D__USE_MALLOC
endif


# if multithread support in the library is requested, then set the
# respective flags
ifneq ($(with-multithreading),no)
  ACE_ROOT    = $(with-multithreading)
  INCLUDE    += -I$(ACE_ROOT)
  LIBPATH    += -L$(ACE_ROOT)/ace
  CXXFLAGS.g += -DDEAL_II_USE_MT
  CXXFLAGS.o += -DDEAL_II_USE_MT

  vpath %.a $(ACE_ROOT)
endif


ifeq ($(enable-shared),yes)
  CXXFLAGS.g += -fPIC
  CXXFLAGS.o += -fPIC
endif
