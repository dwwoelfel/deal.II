TODO:

/* enable multigrid compatibility mode */
#cmakedefine DEAL_II_MULTIGRID_COMPATIBILITY




BUGS:

/* Define if building universal (internal helper macro) */
#cmakedefine AC_APPLE_UNIVERSAL_BUILD

/* Defined if the prototype of abort() has a no-throw exception specification.
   */
#cmakedefine DEAL_II_ABORT_NOTHROW_EXCEPTION

/* Flag indicating whether there is a bug in the compiler that leads to bogus
   warnings for inline class members in anonymous namespaces */
#cmakedefine DEAL_II_ANON_NAMESPACE_BOGUS_WARNING

/* Defined if the compiler needs to see the static keyword even for functions
   in anonymous namespaces, to avoid duplicate symbol errors when linking. For
   the details, look at aclocal.m4 in the top-level directory. */
#cmakedefine DEAL_II_ANON_NAMESPACE_BUG

/* Another test if the compiler needs to see the static keyword even for
   functions in anonymous namespaces, to avoid duplicate symbol errors when
   linking. For the details, look at aclocal.m4 in the top-level directory. */
#cmakedefine DEAL_II_ANON_NAMESPACE_LINKAGE_BUG

/* Defined if the compiler has a problem with assigning arrays in conditionals
   */
#cmakedefine DEAL_II_ARRAY_CONDITIONAL_DECAY_BUG

/* Defined if the compiler gets an internal error compiling some code that
   involves boost::bind */
#cmakedefine DEAL_II_BOOST_BIND_COMPILER_BUG

/* Defined if the compiler gets an internal error compiling some code that
   involves boost::graph */
#cmakedefine DEAL_II_BOOST_GRAPH_COMPILER_BUG

/* Define if the use of socket functionality leads to strange results with
   floating point computations on cygwin systems. */
#cmakedefine DEAL_II_BROKEN_SOCKETS

/* Define if the compiler provides a <errno.g> header file which does not
   define all error codes such as EINTR. In that case, use the system include
   file at /usr/include instead. There is probably a better way to do this,
   but it is not apparent by looking at the C/C++ compatibility header
   provided by the compiler. */
#cmakedefine DEAL_II_USE_DIRECT_ERRNO_H

/* Defined if the compiler has a bug in deducing the type of pointers to const
   member functions. */
#cmakedefine DEAL_II_CONST_MEMBER_DEDUCTION_BUG

/* Defined if the compiler does not honor the explicit keyword on template
   constructors. */
#cmakedefine DEAL_II_EXPLICIT_CONSTRUCTOR_BUG

/* Defined if the compiler has a bug with dynamic casting and dynamic
   libraries */
#cmakedefine DEAL_II_HAVE_DARWIN_DYNACAST_BUG

/* Flag indicating whether the library shall be compiled to use the Tecplot
   interface */
#cmakedefine DEAL_II_HAVE_TECPLOT

/* Defined if the compiler refuses to compile the definition of a function
   that was previously declared abstract. */
#cmakedefine DEAL_II_IMPLEMENTED_PURE_FUNCTION_BUG

/* Define if we have to work around a bug in Sun's Forte compiler. See the
   aclocal.m4 file in the top-level directory for a description of this bug.
   */
#cmakedefine DEAL_II_LOCAL_TYPEDEF_COMP_WORKAROUND

/* Defined if the compiler refuses to allow the explicit specialization of
   static member arrays. For the exact failure mode, look at aclocal.m4 in the
   top-level directory. */
#cmakedefine DEAL_II_MEMBER_ARRAY_SPECIALIZATION_BUG

/* Defined if the compiler refuses to allow the explicit specialization of
   static member variables. For the exact failure mode, look at aclocal.m4 in
   the top-level directory. */
#cmakedefine DEAL_II_MEMBER_VAR_SPECIALIZATION_BUG

/* Defined if the compiler does not support the
   substitution-failure-is-not-an-error paradigm. For the details, look at
   aclocal.m4 in the top-level directory. */
#cmakedefine DEAL_II_SFINAE_BUG

/* Define if we have to work around a bug in Sun's Forte compiler. See the
   aclocal.m4 file in the top-level directory for a description of this bug.
   */
#cmakedefine DEAL_II_TEMPLATE_SPEC_ACCESS_WORKAROUND

/* Defined if the compiler requires the use of the template keyword for
   disambiguation keyword in certain contexts in which it is not supposed to
   do so. For the exact failure mode, look at aclocal.m4 in the top-level
   directory. */
#cmakedefine DEAL_II_TEMPL_OP_DISAMBIGUATION_BUG

/* Define if we have to work around a bug with some compilers that will not
   allow us to specify a fully specialized class of a template as a friend.
   See the aclocal.m4 file in the top-level directory for a description of
   this bug. */
#cmakedefine DEAL_II_TEMPL_SPEC_FRIEND_BUG

/* Defined if a SLEPc installation was found and is going to be used */
#cmakedefine DEAL_II_USE_SLEPC

/* This error appears in the Apple edition of the gcc 3.3, which ships with
   Darwin7.9.0 and probably previous version. It leads to problems during
   linking. For the details, look at aclocal.m4 in the top-level directory. */
#cmakedefine DEAL_II_WEAK_LINKAGE_BUG

/* On SunOS 4.x, the getrusage() function exists, but is not declared in the
   respective header file <resource.h>, as one would think when reading the
   man pages. Then we have to declare this function ourselves in those files
   that use this function. The question whether we have to do so is controlled
   by the preprocessor variable. */
#cmakedefine NO_HAVE_GETRUSAGE


OBSOLETE:

/* Define to 1 if you have the <Amesos.h> header file. */
#cmakedefine HAVE_AMESOS_H # obosolete?!

/* Define to 1 if you have the <AztecOO.h> header file. */
#cmakedefine HAVE_AZTECOO_H # obosolete?!

/* Define to 1 if you have the <AztecOO_Operator.h> header file. */
#cmakedefine HAVE_AZTECOO_OPERATOR_H # obosolete?!

/* Define to 1 if you have the <Epetra_CrsGraph.h> header file. */
#cmakedefine HAVE_EPETRA_CRSGRAPH_H # obosolete?!

/* Define to 1 if you have the <Epetra_CrsMatrix.h> header file. */
#cmakedefine HAVE_EPETRA_CRSMATRIX_H # obosolete?!

/* Define to 1 if you have the <Epetra_Import.h> header file. */
#cmakedefine HAVE_EPETRA_IMPORT_H # obosolete?!

/* Define to 1 if you have the <Epetra_LinearProblem.h> header file. */
#cmakedefine HAVE_EPETRA_LINEARPROBLEM_H # obosolete?!

/* Define to 1 if you have the <Epetra_Map.h> header file. */
#cmakedefine HAVE_EPETRA_MAP_H # obosolete?!

/* Define to 1 if you have the <Epetra_MultiVector.h> header file. */
#cmakedefine HAVE_EPETRA_MULTIVECTOR_H # obosolete?!

/* Define to 1 if you have the <Epetra_Operator.h> header file. */
#cmakedefine HAVE_EPETRA_OPERATOR_H # obosolete?!

/* Define to 1 if you have the <Epetra_SerialComm.h> header file. */
#cmakedefine HAVE_EPETRA_SERIALCOMM_H # obosolete?!

/* Define to 1 if you have the <Epetra_Vector.h> header file. */
#cmakedefine HAVE_EPETRA_VECTOR_H # obosolete?!

/* Define to 1 if you have the <Ifpack.h> header file. */
#cmakedefine HAVE_IFPACK_H # obsolete?!

/* Define to 1 if you have the <inttypes.h> header file. */
#cmakedefine HAVE_INTTYPES_H # obsolete?!

/* Define to 1 if you have the <memory.h> header file. */
#cmakedefine HAVE_MEMORY_H # obsolete?!

/* Define to 1 if you have the <ml_MultiLevelPreconditioner.h> header file. */
#cmakedefine HAVE_ML_MULTILEVELPRECONDITIONER_H

/* Define to 1 if you have the <Sacado.hpp> header file. */
#cmakedefine HAVE_SACADO_HPP # obsolete?!

/* Define to 1 if you have the <Teuchos_ParameterList.hpp> header file. */
#cmakedefine HAVE_TEUCHOS_PARAMETERLIST_HPP # obsolete?!

/* Define to 1 if you have the <Teuchos_RCP.hpp> header file. */
#cmakedefine HAVE_TEUCHOS_RCP_HPP # obsolete?!

/* Define to 1 if you have the <Teuchos_RefCountPtr.hpp> header file. */
#cmakedefine HAVE_TEUCHOS_REFCOUNTPTR_HPP # obsolete?!



TODO:



/**
 * A #define that indicates whether we are using the Microsoft
 * Windows Visual C/C++ compiler. We currently do not run ./configure
 * on MS Windows, so the detection for this compiler happens via
 * the appropriate #ifdef, not through a configuration testcase.
 */
#ifdef _MSC_VER
#  define DEAL_II_MSVC
#endif

/**
 * Using pthreads under windows as a non-static library requires the following
 * preprocessor switch to be undefined.
 */
#ifdef DEAL_II_MSVC
#  if defined(PTW32_STATIC_LIB)
#    undef PTW32_STATIC_LIB
#  endif
#endif


#include <deal.II/base/numbers.h>
#include <deal.II/base/types.h>

// Disable a bunch of warnings for Microsoft Visual C++. We should
// work on reducing this list over time to those that are truly
// harmless and not indicative of actual problems
#ifdef DEAL_II_MSVC
#  pragma warning( disable : 4244 ) // implied downcasting from double to float
#  pragma warning( disable : 4267 ) // implied downcasting from size_t to unsigned int
#  pragma warning( disable : 4996 ) // unsafe functions, such as strcat and sprintf
#  pragma warning( disable : 4355 ) // 'this' : used in base member initializer list
#  pragma warning( disable : 4661 ) // no suitable definition provided for explicit template instantiation request
#  pragma warning( disable : 4800 ) // forcing value to bool 'true' or 'false' (performance warning)
#  pragma warning( disable : 4146 ) // unary minus operator applied to unsigned type, result still unsigned
#  pragma warning( disable : 4667 ) // no function template defined that matches forced instantiation
#  pragma warning( disable : 4520 ) // multiple default constructors specified
#  pragma warning( disable : 4700 ) // uninitialized local variable
#  pragma warning( disable : 4789 ) // destination of memory copy is too small
#  pragma warning( disable : 4808 ) // case 'value' is not a valid value for switch condition of type 'bool
#endif // DEAL_II_MSVC
