# GNUmakefile has priority over Makefile for GNU Make.
# So if a Makefile was generated by CMake due to an in-source configure
# chain-load it:
ifneq ($(wildcard Makefile),)
  include Makefile
else
  .PHONY: all
  all:
	@echo ""
	@echo "###"
	@echo "#"
	@echo "#  Support GNUmakefile for deal.II"
	@echo "#"
	@echo "#  TODO: Helpfull message on how to use CMake"
	@echo "#"
	@echo "#  The following support targets exist:"
	@echo "#   indent      -  run astyle on the source base"
	@echo "#   cmake       -  bootstrap CMake in ./bundled/cmake"
	@echo "#   build_test  -  run a build test. The following _optional_ environment"
	@echo "#                  variables are considered:"
	@echo "#                    LOGDIR     - path for log output"
	@echo "#                    CONFIGFILE - optional path to a configuration file"
	@echo "#"
	@echo "#                    CMAKE      - the cmake executable, defaults to 'cmake'"
	@echo "#                    MAKEOPTS   - options for gmake"
	@echo "#                    TMPDIR"
	@echo "#"
	@echo "###"
	@echo ""
endif


style-h-files:= $(wildcard include/deal.II/*/*.h)
style-cc-files:= $(wildcard source/*/*.cc)
style-examples:= $(wildcard examples/*/*.cc)
.PHONY: indent
indent:
	@echo "Indenting all files"
	@for f in  $(style-h-files) $(style-cc-files) $(style-examples) ;\
	do\
	  echo $$f ;\
	  astyle --options=contrib/utilities/astyle.rc $$f ;\
	done


.PHONY: cmake
cmake:
	cd bundled/cmake && make
	@echo ""
	@echo "###"
	@echo "#"
	@echo "# CMake successfully bootstrapped in bundled/cmake"
	@echo "#"
	@echo "# Please add"
	@echo "#     export PATH=\"$(PWD)/bundled/cmake/bin:\$$PATH\""
	@echo "# to your ~/.bashrc file (or similar)."
	@echo "#"
	@echo "###"
	@echo ""


#
# Target for build tests:
#
TMPDIR=/tmp
CMAKE=cmake
SVN=svn info .
date:= $(shell date +%s)
random:=$(shell echo "$$RANDOM")
testdir:= "$(TMPDIR)"/deal-build-test.$(date)-$(random)
builddir:= $(testdir)/build
installdir:= $(testdir)/install
LOGDIR=$(testdir)
logfile:=$(LOGDIR)/$(date).$(firstword $(notdir $(CONFIGFILE)) automatic).log

.PHONY: build_test
build_test:
	mkdir -p $(builddir)
	mkdir -p $(installdir)
	mkdir -p $(LOGDIR)
	@echo "AUTOMATED DEAL.II BUILD TEST" | tee $(logfile)
	@echo "BEGIN HEADER `date -u '+%Y-%m-%d %T'`" | tee -a $(logfile)
	@$(SVN) | perl -ne 'print "dealii-feature: revision=$$_" if s/Last Changed Rev: //; print "dealii-feature: branch=$$1\n" if m/svn\.dealii\.org\/(.+)\/deal.II/;' | tee -a $(logfile)
	@echo "dealii-feature: user=$(USER)"
	@echo "dealii-feature: host=`hostname`"
	@echo "dealii-feature: configuration=`basename \"$(CONFIGFILE)\"`"
	@echo END HEADER `date -u '+%Y-%m-%d %T'`\n | tee -a $(logfile)
	@echo "BEGIN CONFIGURE OUTPUT `date -u '+%Y-%m-%d %T'`" | tee -a $(logfile)
	cd $(builddir) && "$(CMAKE)" -C "$(CONFIGFILE)" -DCMAKE_INSTALL_PREFIX=$(installdir) $(PWD) >>$(logfile) 2>&1
	@echo "END CONFIGURE OUTPUT `date -u '+%Y-%m-%d %T'`" | tee -a $(logfile)
	@echo "BEGIN CMAKE SYSTEM INFORMATION `date -u '+%Y-%m-%d %T'`" | tee -a $(logfile)
	cd $(builddir) && "$(CMAKE)" --system-information >>$(logfile) 2>&1
	@echo "END CMAKE SYSTEM INFORMATION `date -u '+%Y-%m-%d %T'`" | tee -a $(logfile)
	@echo "BEGIN REPORT FEATURES `date -u '+%Y-%m-%d %T'`" | tee -a $(logfile)
	cd $(builddir) && make $(MAKEOPTS) run_report_features >>$(logfile) 2>&1
	@echo "END REPORT FEATURES `date -u '+%Y-%m-%d %T'`" | tee -a $(logfile)
	@echo "BEGIN BUILD INSTALL OUTPUT `date -u '+%Y-%m-%d %T'`" | tee -a $(logfile)
	cd $(builddir) && make $(MAKEOPTS) install >>$(logfile) 2>&1
	@echo "END BUILD INSTALL OUTPUT `date -u '+%Y-%m-%d %T'`" | tee -a $(logfile)
	@echo "BEGIN BUILD EXAMPLES OUTPUT `date -u '+%Y-%m-%d %T'`" | tee -a $(logfile)
	cd $(installdir)/examples && make $(MAKEOPTS) build_examples >>$(logfile) 2>&1
	@echo "END BUILD EXAMPLES OUTPUT `date -u '+%Y-%m-%d %T'`" | tee -a $(logfile)
	@echo "BEGIN RUN EXAMPLES OUTPUT `date -u '+%Y-%m-%d %T'`" | tee -a $(logfile)
	cd $(installdir)/examples && make $(MAKEOPTS) run_examples >>$(logfile) 2>&1
	@echo "END RUN EXAMPLES OUTPUT `date -u '+%Y-%m-%d %T'`" | tee -a $(logfile)
	rm -rf $(builddir)
	rm -rf $(installdir)
	-rmdir --ignore-fail-on-non-empty -p $(testdir)
