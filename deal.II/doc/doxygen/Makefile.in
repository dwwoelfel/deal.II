# $Id$
# $Name$
#
# Copyright (c) the deal.II authors 2003, 2010

SHELL=/bin/bash
###############################
# Configured variables

D     = @prefix@
include $D/common/Make.global_options



html: deal.tag

private:
	perl -pi -e 's/(EXTRACT_PRIVATE\s*=\s*)NO/$$1YES/;s/(INTERNAL_DOCS\s*=\s*)NO/$$1YES/;' options.dox
	$(MAKE) html

# Generate documentation. write the output to a file so as not to hide the
# important message to impatient observers that this process can take quite
# a while
#
# We have to fix up one case after doxygen runs: doxygen versions
# 1.6.2 and 1.6.3 (and only these versions) create output files for
# @page commands that contain underscores where the underscore is
# escaped by a second underscore (e.g. "step__1.html" instead of
# "step_1.html"). While all internal links from the doxygen output are
# correct, the links we have from the handwritten html files won't
# work any more this way. The simplest way to avoid this is to simply
# copy all such files to their alternative (traditional) name so that
# the external links still work (they will link to a different but
# equal file).
deal.II deal.tag: tutorial \
          deal.dox \
	  $D/include/deal.II/*/*.h \
	  headers/*.h \
	  $(addprefix tutorial/doxygen/, $(shell ls tutorial/doxygen/))
	@echo "=== Generating reference documentation. " \
              "This can take several minutes..."
	@if test ! -d deal.II ; then mkdir deal.II ; fi
	cat @DOXYGEN_OPTIONS@ deal.dox | @DOXYGEN@ - > doxygen.log
	@if test -f deal.II/step__1.html ; then \
	   for i in deal.II/*__*html ; do \
	     j="`echo $$i | sed s/__/_/g`" ; \
	     cp $$i $$j ; \
	   done ; \
	  fi
	@cp deal.css deal.II


tutorial:
	@cd tutorial ; $(MAKE)

deal.dox: Makefile $(shell echo images ../../examples/*/doc ../news/*.h)
	@echo "=== Making $@"
	@echo "INPUT=`echo headers $D/include/deal.II/* tutorial/doxygen ../news/*.h`" > $@
	@echo "IMAGE_PATH=`echo images ../../examples/*/doc`" >> $@



# validate cross references. there are so many html files in these
# directories that we can just call
#    $(PERL) $D/common/scripts/validate-xrefs.pl deal.II/*.html
# as this leads to error messages of the kind "/usr/bin/perl: Argument
# list too long". Instead, use a loop over all html files
validate-xrefs:
	@echo "--- Validating xrefs in doxygen/deal.II/ ---"
	@cd deal.II ; \
		for i in *.html ; do \
			$(PERL) $D/common/scripts/validate-xrefs.pl $$i ; \
		done

# we have so many files that we can't just do "rm deal.II/*" because that
# leads to overlong command lines. gotta split it up
clean:
	-for i in deal.II/* ; do rm $$i ; done
	-rm *.tag
	@cd tutorial ; $(MAKE) CLEAN=yes clean


.PHONY: html tutorial private deal.II \
	validate-xrefs clean tutorial
