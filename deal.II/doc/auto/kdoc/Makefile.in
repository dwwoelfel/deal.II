############################################################
# $Id$
############################################################

D           = @DEAL2_DIR@
multigrid   = @enablemultigrid@
kdocdir     = @kdocdir@
kdocversion = @kdocversion@


include $D/common/Make.global_options

ifeq ($(kdocversion),1)
KDOCFLAGS=-I$(kdocdir) $(kdocdir)/kdoc -a -p -L $D/doc/auto/kdoc
else
KDOCFLAGS=-I$(kdocdir) $(kdocdir)/kdoc -a --private \
          --html-logo ../../../pictures/deal.II_3.0_1.150.jpg \
          --libdir $D/doc/auto/kdoc --name
endif

kdoc.base     = $(shell echo $D/base/include/base/*.h)
kdoc.lac      = $(shell echo $D/lac/include/lac/*.h)
kdoc.grid     = $(shell echo $D/deal.II/include/grid/*.h)
kdoc.dof      = $(shell echo $D/deal.II/include/dofs/*.h) \
                $(shell echo $D/deal.II/include/fe/*.h)
kdoc.numerics = $(shell echo $D/deal.II/include/numerics/*.h)
kdoc.multigrid= $(shell echo $D/deal.II/include/multigrid/*.h)


# specify the names of the resulting doc libraries
ifeq ($(multigrid),yes)
kdoc.library-files = base.kdoc         \
                     lac.kdoc          \
                     grid.kdoc         \
                     dof.kdoc          \
                     numerics.kdoc     \
                     multigrid.kdoc
else
kdoc.library-files = base.kdoc         \
                     lac.kdoc          \
                     grid.kdoc         \
                     dof.kdoc          \
                     numerics.kdoc
endif

kdoc: kdoc-installed $(kdoc.library-files)


# check whether kdoc is already installed. if not, then try to do
# so. also install afresh if not up-to-date with the sources
kdoc-installed:
	cd $(kdocdir:kdoc/bin=kdoc) ; $(MAKE)



# now for the generation of the documentation of the sublibraries.
# first let kdoc generate the whole thing, then loop over all output
# files and cut some paths in the output to a reasonable
# length. before everything else, make sure that kdoc is installed

base.kdoc:      kdoc-installed base-html-files      base-fix-files
lac.kdoc:       kdoc-installed lac-html-files       lac-fix-files
grid.kdoc:      kdoc-installed grid-html-files      grid-fix-files
dof.kdoc:       kdoc-installed dof-html-files       dof-fix-files
numerics.kdoc:  kdoc-installed numerics-html-files  numerics-fix-files
multigrid.kdoc: kdoc-installed multigrid-html-files multigrid-fix-files


# description of how to make the output of kdoc: first list which
# files each output dir depends upon, then state the general rule of
# how to make the output. let everything depend on kdoc being already
# installed (we need to re-state this dependency here as we could
# otherwise get problems when using parallel builds)
#
# note that when running kdoc, we discard the forward-declarations
# file as this brings kdoc into trouble
base-html-files:      kdoc-installed $(kdoc.base)
lac-html-files:       kdoc-installed $(kdoc.lac)
grid-html-files:      kdoc-installed $(kdoc.grid)
dof-html-files:       kdoc-installed $(kdoc.dof)
numerics-html-files:  kdoc-installed $(kdoc.numerics)
multigrid-html-files: kdoc-installed $(kdoc.multigrid)
%-html-files:
	@$(PERL) $(KDOCFLAGS) $(subst -html-files,,$@) \
                              --outputdir $(subst -html-files,,$@) \
	                      $(filter-out %forward_declarations.h, $(^:kdoc-installed=))


# now how to fix the files:
# fix the #include<...> directives to only contain the 
# paths that are needed inside the programs instead of the global
# paths
#
# also fix include paths in the files header-list.htmlbase-fix-files: base-html-files
%-fix-files:
	for htmlfile in $(subst -fix-files,,$@)/*html ; do \
	    echo "Fixing include paths in $$htmlfile..." ; \
	    perl -pi -e 's,(#include &lt;<A HREF=\"[^\"]+\">)$D/?[^/]+/include/,$$1,g;' "$$htmlfile" ;\
	done
	for htmlfile in $(subst -fix-files,,$@)/header-list.html $(subst -fix-files,,$@)/all-globals.html ; do \
	    echo "Fixing include paths in special file $$htmlfile..." ; \
	    case "$$htmlfile" in \
	      *header-list*) \
			perl -pi -e 's,<TH>$D/?[^/]+/include/(.*?) - $D/?[^/]+/include/(.*?)</TH>,<TH>$$1 - $$2</TH>,g; \
			             s,(<A HREF=\"[^\"]+\">)$D/?[^/]+/include/,$$1,g;' \
				"$$htmlfile" ;\
			;; \
	      *all-globals*) \
			perl -pi -e 's,(<A HREF=\"[^\"]+\">)$D/?[^/]+/include/,$$1,g;' \
				"$$htmlfile" ;\
			;; \
	      *) \
			echo "*******Unknown file $$htmlfile? Something must have gone wrong!*********" ; \
			;; \
	    esac ; \
	done

